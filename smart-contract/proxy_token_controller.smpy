import smartpy as sp

################## FA2 Entrypoint parameters types ##################

contract_metadata_type = sp.TRecord(
    k = sp.TString,
    v= sp.TBytes
    )

operator_param_type = sp.TRecord(
    owner = sp.TAddress,
    operator = sp.TAddress,
    token_id = sp.TNat
    )

update_operators_params_type = sp.TList(
    sp.TVariant(
        add_operator = operator_param_type,
        remove_operator = operator_param_type
        )
    )

transfer_type = sp.TRecord(
    from_ = sp.TAddress,
    txs = sp.TList(
        sp.TRecord(
            to_ = sp.TAddress,
            token_id = sp.TNat,
            amount = sp.TNat
            ).layout(("to_", ("token_id", "amount")))
        )
    ).layout(("from_", "txs"))

transfer_params_type = sp.TList(transfer_type)

batch_mint_params_type = sp.TRecord(
    metadata_links = sp.TList(sp.TBytes),
    first_token_id = sp.TNat,
    address = sp.TAddress
    )

token_metadata_type = sp.TMap(sp.TString, sp.TBytes)

mint_params_type = sp.TRecord(
    token_id = sp.TNat, 
    amount = sp.TNat, 
    address = sp.TAddress,
    metadata = token_metadata_type
    )

fa2_params_types = {
    "mint": mint_params_type,
    "update_operators": update_operators_params_type,
    "transfer": transfer_params_type,
    "set_pause": sp.TBool,
    "set_metadata": contract_metadata_type,
    "set_administrator": sp.TAddress,
    "batch_mint": batch_mint_params_type
    } 

################## Proxy types ##################

multisig_build_params_type = sp.TRecord(
    multisig_id = sp.TString,
    signers = sp.TList(sp.TAddress),
    build_and_sign = sp.TBool,
    call_params = sp.TRecord(
        target_address = sp.TAddress,
        entry_point = sp.TString,
        parameters = sp.TVariant(
            mint = sp.TRecord(mint = mint_params_type, operator = sp.TOption(sp.TAddress)),
            update_operators = update_operators_params_type,
            transfer = transfer_params_type,
            set_pause = sp.TBool,
            set_metadata = contract_metadata_type,
            set_administrator = sp.TAddress,
            batch_mint = sp.TRecord(batch_mint = batch_mint_params_type, operator = sp.TOption(sp.TAddress))         
            )
        )
    )

rule_type = sp.TRecord(
    template_id = sp.TNat,
    authorized_builders = sp.TSet(sp.TString) # group names
)

template_type = sp.TRecord(
    contract_threshold = sp.TNat,
    groups = sp.TMap(sp.TString, sp.TRecord(group_threshold = sp.TNat, group_weight = sp.TNat))
)

update_groups_type = sp.TList(
    sp.TVariant(
            add = sp.TMap(sp.TString, sp.TAddress),
            remove = sp.TMap(sp.TString, sp.TAddress)
    )
)
update_templates_type = sp.TList(
    sp.TVariant(
            update = sp.TMap(sp.TNat, template_type),
            remove = sp.TList(sp.TNat)
    )
)
update_rules_type = sp.TList(
    sp.TVariant(
            update = sp.TMap(sp.TString, rule_type),
            remove = sp.TList(sp.TString)
    )
)


class ProxyTokenController(sp.Contract):
    def __init__(self, proxy_admins, groups, multisig_templates, rules):
        self.init(
            proxy_admins = sp.set(proxy_admins),
            multisigs = sp.big_map(),
            #nb_multisigs = @TODO consecutive?!?
            groups = sp.map(
                l = groups, 
                tkey = sp.TString, 
                tvalue = sp.TSet(sp.TAddress)
            ),
            multisig_templates = sp.map(
                l = multisig_templates, 
                tkey = sp.TNat, 
                tvalue = template_type
            ),
            rules = sp.map(
                l = rules, 
                tkey = sp.TString, # entrypoint
                tvalue = rule_type
            )
        )

    @sp.entry_point
    def update_groups(self, params: update_groups_type):
        sp.verify(self.data.proxy_admins.contains(sp.sender), "senderIsNotAuthorized")
        # TODO verify that TAG supports Variants
        sp.for updates in params:
            with updates.match_cases() as arg:
                with arg.match("add") as upd:
                    sp.for elt in upd.items():
                        self.data.groups[elt.key].add(elt.value)    
                with arg.match("remove") as upd:
                    sp.for elt in upd.items():
                        self.data.groups[elt.key].remove(elt.value)    
 
    @sp.entry_point
    def update_templates(self, params: update_templates_type):
        sp.verify(self.data.proxy_admins.contains(sp.sender), "senderIsNotAuthorized")
        # TODO verify that TAG supports Variants
        sp.for updates in params:
            with updates.match_cases() as arg:
                with arg.match("update") as upd:
                    sp.for elt in upd.items():
                        self.data.multisig_templates[elt.key] = elt.value
                with arg.match("remove") as upd:
                    sp.for elt in upd:
                        del self.data.multisig_templates[elt.key]

    @sp.entry_point
    def update_rules(self, params: update_groups_type):
        sp.verify(self.data.proxy_admins.contains(sp.sender), "senderIsNotAuthorized")
        # TODO verify that TAG supports Variants
        sp.for updates in params:
            with updates.match_cases() as arg:
                with arg.match("update") as upd:
                    sp.for elt in upd.items():
                        self.data.groups[elt.key] = elt.value    
                with arg.match("remove") as upd:
                    sp.for elt in upd:
                        del self.data.groups[elt.key]


    def _is_builder(self, sender: sp.TAddress, authorized_builders: sp.TSet(sp.TString)):
        # empty set means that any one can build 
        sp.if sp.len(authorized_builders) != 0:
            authorized = sp.local('authorized', False)
            sp.for group in authorized_builders.elements():
                sp.verify(self.data.groups.contains(group), "UnknownGroup")
                sp.for adr in self.data.groups[group].elements():
                    sp.if sender == adr:
                        authorized.value = True
            sp.verify(authorized.value, "NotAuthorizedBuilder")
                
    # define a multisig contract
    @sp.entry_point
    def build(self, params: multisig_build_params_type):
        sp.verify(~self.data.multisigs.contains(params.multisig_id), "InvalidMultisigId")

        sp.verify(self.data.rules.contains(params.call_params.entry_point), "NoRuleForThisEntrypoint")
        rule = self.data.rules[params.call_params.entry_point]
        self._is_builder(sp.sender, rule.authorized_builders)

        sp.verify(self.data.multisig_templates.contains(rule.template_id), "UnknownTemplate")
        rule_template = self.data.multisig_templates[rule.template_id]
        
        participants = sp.local('participants', sp.list([]))
        groups = sp.local('groups', sp.list([]))
        sp.for group in rule_template.groups.items():
        # empty string group means participants are passed in parameters
            sp.if group.key == "": 
                sp.for signer in params.signers:
                    participants.value.push(sp.record(hasVoted = False, id = signer))
            sp.else:  
                sp.for signer in self.data.groups[group.key].elements():
                    participants.value.push(sp.record(hasVoted = False, id = signer))                
            groups.value.push(sp.record(
                participants = participants.value,
                votes = 0,
                ok = False,
                group_threshold = group.value.group_threshold, 
                group_weight = group.value.group_weight
            ))
            participants.value = sp.list([])

        contract = sp.record(
             weight          = 0,
             contract_threshold = rule_template.contract_threshold,
             groups          = groups.value,
             ok              = False,
             call_params      = params.call_params
            )
        self.data.multisigs[params.multisig_id] = contract
        sp.if params.build_and_sign:
            self._sign(sp.record(contractId = params.multisig_id, id = sp.sender))

    # sign a multisig contract
    @sp.entry_point
    def sign(self, params):
        sp.verify(params.id == sp.sender, "InvalidSender")
        self._sign(params)

    def _sign(self, params):
        id = params.id
        contractId = params.contractId
        contract = self.data.multisigs[contractId]
        sp.for group in contract.groups:
            sp.for participant in group.participants:
                sp.if participant.id == id:
                    sp.verify(~ participant.hasVoted, "ParticipantAlreadyVoted")
                    participant.hasVoted = True
                    group.votes += 1
                    sp.if ~group.ok & (group.group_threshold <= group.votes):
                        group.ok = True
                        contract.weight += group.group_weight
                        sp.if ~contract.ok & (contract.contract_threshold <= contract.weight):
                            contract.ok = True
                            self.onOK(contract.call_params)

    def onOK(self, params):
        err_msg = "ParametersAndEntrypointAreNotCompatible"
        with params.parameters.match_cases() as arg:
            with arg.match("mint") as parameters:
                sp.verify(params.entry_point == "mint", err_msg)
                self._execute_call("mint", parameters.mint, params.target_address)
                sp.if parameters.operator.is_some(): 
                    # add operator along with the mint
                    add_op_parameters = [
                        sp.variant("add_operator", sp.record(
                            owner = parameters.mint.address,
                            operator = parameters.operator.open_some("OperatorParamNotFound"),
                            token_id = parameters.mint.token_id
                        ))
                    ]
                    self._execute_call("update_operators", add_op_parameters, params.target_address)
            with arg.match("transfer") as parameters:
                sp.verify(params.entry_point == "transfer", err_msg)
                self._execute_call("transfer", parameters, params.target_address)
            with arg.match("update_operators") as parameters:
                sp.verify(params.entry_point == "update_operators", err_msg)
                self._execute_call("update_operators", parameters, params.target_address)
            with arg.match("set_pause") as parameters:
                sp.verify(params.entry_point == "set_pause", err_msg)
                self._execute_call("set_pause", parameters, params.target_address)
            with arg.match("set_metadata") as parameters:
                sp.verify(params.entry_point == "set_metadata", err_msg)
                self._execute_call("set_metadata", parameters, params.target_address)
            with arg.match("set_administrator") as parameters:
                sp.verify(params.entry_point == "set_administrator", err_msg)
                self._execute_call("set_administrator", parameters, params.target_address)
            with arg.match("batch_mint") as parameters:
                sp.verify(params.entry_point == "batch_mint", err_msg)
                self._execute_call("batch_mint", parameters.batch_mint, params.target_address)
                # add operator along with the batch_mint
                sp.if parameters.operator.is_some(): 
                    add_op_parameters = sp.local('add_op_parameters', sp.list([]))
                    batch_length = sp.len(parameters.batch_mint.metadata_links)
                    token_id_0 = parameters.batch_mint.first_token_id
                    sp.for token_id in sp.range(token_id_0, token_id_0 + batch_length, step = 1):
                        add_op_parameters.value.push(sp.variant("add_operator", sp.record(
                            owner = parameters.batch_mint.address,
                            operator = parameters.operator.open_some("OperatorParamNotFound"),
                            token_id = token_id
                        )))
                    self._execute_call("update_operators", add_op_parameters.value, params.target_address)
        


    def _execute_call(self, entrypoint, parameters, target_address):
        sp.transfer(
            parameters,
            sp.tez(0),
            sp.contract(
                fa2_params_types[entrypoint], 
                target_address, 
                entry_point = entrypoint
                ).open_some()
            )
        

# Tests
@sp.add_test(name = "ProxyTokenController")
def test():

    scenario = sp.test_scenario()

    super_fa2_admin1 = sp.address("tz1PxztX893wouZdQmGVARX5c31Cbor354fv")
    super_fa2_admin2 = sp.address("tz1R5Sd63TCC37g9wxEe8g3JQ3GYEq1oAv5j")

    super_minter1 = sp.address("tz1Tz45dBEsM5RDXCaj1Ut4ay6ZyHKamUBvT")
    super_minter2 = sp.address("tz1YjCQ9ATce6gJHTnmn7zZaBaLLWqKNcqdK")
    
    minter1 = sp.address("tz1XWbzEHXfuEMKR4Vs6ewDMFnKa8VoApVdK")
    minter2 = sp.address("tz1XxrCBL7RyKFKMMvMG5CHmbc1ubVr7ehHm")

    alice = sp.address("tz1YmbuUQagUMY8AycZuvHyf8zm8sgPCMYgG")

    batch_minter = sp.address("tz1bwp2oXPzdHYVzn6cpsmehehdcUuF2Bgk5")

    proxy_admin = sp.address("tz1caQoK6ZVwg6CVakpJo14nM43UhoG7TZ9J")

    multisig_builder = proxy_admin

    target = sp.address("KT1aDD7H3WgbFgd7YeMn8UbqQeMXJ96kxvD5")

    groups = {
        "super_fa2_admins": sp.set([super_fa2_admin1, super_fa2_admin2]),
        "super_minters": sp.set([super_minter1, super_minter2]),
        "minters": sp.set([minter1, minter2]),
        "batch_minters": sp.set([batch_minter]),
        "multisig_builders": sp.set([multisig_builder])
        }

    multisig_templates = {
        0: sp.record(
                contract_threshold = 1,
                groups = {
                    "super_fa2_admins": sp.record(group_threshold = 1, group_weight = 1)
                }
            ),
        1: sp.record(
                contract_threshold = 3,
                groups = {
                    "super_minters": sp.record(group_threshold = 1, group_weight = 1),
                    "minters": sp.record(group_threshold = 2, group_weight = 1),
                    "": sp.record(group_threshold = 1, group_weight = 2)
                }
            ),
        2: sp.record(
                contract_threshold = 1,
                groups = {
                    "batch_minters": sp.record(group_threshold = 1, group_weight = 1)
                }
            )
    }

    rules = {
        "mint": sp.record(
            template_id = 1,
            authorized_builders = sp.set(["multisig_builders"])
        ),
        "batch_mint": sp.record(
            template_id = 2,
            authorized_builders = sp.set(["multisig_builders", "batch_minters"])
        ),
        "set_administrator": sp.record(
            template_id = 0,
            authorized_builders = sp.set(["super_fa2_admins"])
        ),
        "update_operators": sp.record(
            template_id = 0,
            authorized_builders = sp.set(["super_fa2_admins"])
        ),
        "transfer": sp.record(
            template_id = 0,
            authorized_builders = sp.set(["super_fa2_admins"])
        ),
        "set_pause": sp.record(
            template_id = 0,
            authorized_builders = sp.set(["super_fa2_admins"])
        ),
        "set_metadata": sp.record(
            template_id = 0,
            authorized_builders = sp.set([]) # in order to test if anyone can build when the list is empty
        )
    }
    
    #PCC
    ## put the real initiator parameters, the contract will be initially deployed with the following parameters
    c0 = ProxyTokenController(
        [proxy_admin], 
        groups, 
        multisig_templates,
        rules
        )
    scenario += c0
    
    # DigitalPassport
    scenario += c0.build(
        build_and_sign = False,
        multisig_id = "0000",
        signers = [alice], # Owner
        call_params = sp.record(
            target_address = target,
            entry_point = "mint",
            parameters = sp.variant("mint", sp.record(
                mint = sp.record(
                    token_id = 0,
                    amount = 1,
                    metadata = {"": sp.bytes("0x050100000035697066733a2f2f516d5a36584762695a4d77664454325066436e71747462426e564d4a727473397670636867575251544b33337762")},
                    address = alice
                ),
                operator = sp.some(super_minter1)
            ))
        )
    ).run(sender = multisig_builder)
    scenario += c0.sign(id = alice, contractId = "0000").run(sender = alice)
    scenario += c0.sign(id = super_minter1, contractId = "0000").run(sender = super_minter1)
    
    # DATA Catalog
    scenario += c0.build(
        multisig_id = "1111",
        build_and_sign = True,
        signers = [],
        call_params = sp.record(
            target_address = target,
            entry_point = "batch_mint",
            parameters = sp.variant("batch_mint", sp.record(
                batch_mint = sp.record(
                    first_token_id = 1,
                    metadata_links = [
                        sp.bytes("0x050100000035697066733a2f2f516d5a36584762695a4d77664454325066436e71747462426e564d4a727473397670636867575251544b33337762"),
                        sp.bytes("0x050200000035697066733a2f2f516d5a36584762695a4d77664454325066436e71747462426e564d4a727473397670636867575251544b33337762")
                    ],
                    address = alice
                ),
                operator = sp.some(minter2)
            ))
        )
    ).run(sender = batch_minter)

    # CREATE 
    scenario += c0.build(
        multisig_id = "2222",
        build_and_sign = False,
        signers = [], 
        call_params = sp.record(
            target_address = target,
            entry_point = "batch_mint",
            parameters = sp.variant("batch_mint", sp.record(
                batch_mint = sp.record(
                    first_token_id = 1,
                    metadata_links = [
                        sp.bytes("0x050100000035697066733a2f2f516d5a36584762695a4d77664454325066436e71747462426e564d4a727473397670636867575251544b33337762"),
                        sp.bytes("0x050200000035697066733a2f2f516d5a36584762695a4d77664454325066436e71747462426e564d4a727473397670636867575251544b33337762")
                    ],
                    address = alice
                ),
                operator = sp.some(minter2)
            ))
        )
    ).run(sender = batch_minter)

    # Non authorized builder
    scenario += c0.build(
        multisig_id = "3333",
        build_and_sign = True,
        signers = [], 
        call_params = sp.record(
            target_address = target,
            entry_point = "transfer",
            parameters = sp.variant("transfer", [sp.record(
                from_ = alice,
                txs = [sp.record(
                    to_ = minter2,
                    token_id = 0,
                    amount = 1
                    )]
                )]),
        )
    ).run(sender = alice, valid = False)

    scenario += c0.build(
        multisig_id = "3333",
        build_and_sign = True,
        signers = [], 
        call_params = sp.record(
            target_address = target,
            entry_point = "transfer",
            parameters = sp.variant("transfer", [sp.record(
                from_ = alice,
                txs = [sp.record(
                    to_ = minter2,
                    token_id = 0,
                    amount = 1
                    )]
                )]),
        )
    ).run(sender = super_fa2_admin1)
 
    # anyone can build when the list is empty

    scenario += c0.build(
        multisig_id = "4444",
        build_and_sign = False,
        signers = [], 
        call_params = sp.record(
            target_address = target,
            entry_point = "set_metadata",
            parameters = sp.variant("set_metadata" , sp.record(
                k = "",
                v = sp.bytes("0x050100000035697066733a2f2f516d5a36584762695a4d77664454325066436e71747462426e564d4a727473397670636867575251544b33337762")
                )),
        )
    )

    # Test groups, templates and rules update
    # @TODO
