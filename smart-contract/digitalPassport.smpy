
import smartpy as sp

##############################################################################
##############################################################################
#################################### FA_2 ####################################
##############################################################################
##############################################################################

##
## ## Meta-Programming Configuration
##
## The `FA2_config` class holds the meta-programming configuration.
##

class FA2_config:
    def __init__(self,
                 debug_mode                         = False,
                 single_asset                       = False,
                 non_fungible                       = False,
                 add_mutez_transfer                 = False,
                 readable                           = True,
                 force_layouts                      = True,
                 support_operator                   = True,
                 assume_consecutive_token_ids       = True,
                 store_total_supply                 = True,
                 lazy_entry_points                  = False,
                 allow_self_transfer                = False,
                 use_token_metadata_offchain_view   = False
                 ):

        if debug_mode:
            self.my_map = sp.map
        else:
            self.my_map = sp.big_map
        # The option `debug_mode` makes the code generation use
        # regular maps instead of big-maps, hence it makes inspection
        # of the state of the contract easier.

        self.use_token_metadata_offchain_view = use_token_metadata_offchain_view
        # Include offchain view for accessing the token metadata (requires TZIP-016 contract metadata)

        self.single_asset = single_asset
        # This makes the contract save some gas and storage by
        # working only for the token-id `0`.

        self.non_fungible = non_fungible
        # Enforce the non-fungibility of the tokens, i.e. the fact
        # that total supply has to be 1.

        self.readable = readable
        # The `readable` option is a legacy setting that we keep around
        # only for benchmarking purposes.
        #
        # User-accounts are kept in a big-map:
        # `(user-address * token-id) -> ownership-info`.
        #
        # For the Babylon protocol, one had to use `readable = False`
        # in order to use `PACK` on the keys of the big-map.

        self.force_layouts = force_layouts
        # The specification requires all interface-fronting records
        # and variants to be *right-combs;* we keep
        # this parameter to be able to compare performance & code-size.

        self.support_operator = support_operator
        # The operator entry-points always have to be there, but there is
        # definitely a use-case for having them completely empty (saving
        # storage and gas when `support_operator` is `False).

        self.assume_consecutive_token_ids = assume_consecutive_token_ids
        # For a previous version of the TZIP specification, it was
        # necessary to keep track of the set of all tokens in the contract.
        #
        # The set of tokens is for now still available; this parameter
        # guides how to implement it:
        # If `true` we don't need a real set of token ids, just to know how
        # many there are.

        self.store_total_supply = store_total_supply
        # Whether to store the total-supply for each token (next to
        # the token-metadata).

        self.add_mutez_transfer = add_mutez_transfer
        # Add an entry point for the administrator to transfer tez potentially
        # in the contract's balance.

        self.lazy_entry_points = lazy_entry_points
        #
        # Those are “compilation” options of SmartPy into Michelson.
        #

        self.allow_self_transfer = allow_self_transfer
        # Authorize call of `transfer` entry_point from self
        name = "FA2"
        if debug_mode:
            name += "-debug"
        if single_asset:
            name += "-single_asset"
        if non_fungible:
            name += "-nft"
        if add_mutez_transfer:
            name += "-mutez"
        if not readable:
            name += "-no_readable"
        if not force_layouts:
            name += "-no_layout"
        if not support_operator:
            name += "-no_ops"
        if not assume_consecutive_token_ids:
            name += "-no_toknat"
        if not store_total_supply:
            name += "-no_totsup"
        if lazy_entry_points:
            name += "-lep"
        if allow_self_transfer:
            name += "-self_transfer"
        self.name = name

## ## Auxiliary Classes and Values
##
## The definitions below implement SmartML-types and functions for various
## important types.
##
token_id_type = sp.TNat

class Error_message:
    def __init__(self, config):
        self.config = config
        self.prefix = "FA2_"
    def make(self, s): return (self.prefix + s)
    def token_undefined(self):       return self.make("TOKEN_UNDEFINED")
    def insufficient_balance(self):  return self.make("INSUFFICIENT_BALANCE")
    def not_operator(self):          return self.make("NOT_OPERATOR")
    def not_owner(self):             return self.make("NOT_OWNER")
    def operators_unsupported(self): return self.make("OPERATORS_UNSUPPORTED")
    def not_admin(self):             return self.make("NOT_ADMIN")
    def not_admin_or_operator(self): return self.make("NOT_ADMIN_OR_OPERATOR")
    def paused(self):                return self.make("PAUSED")

## The current type for a batched transfer in the specification is as
## follows:
##
## ```ocaml
## type transfer = {
##   from_ : address;
##   txs: {
##     to_ : address;
##     token_id : token_id;
##     amount : nat;
##   } list
## } list
## ```
##
## This class provides helpers to create and force the type of such elements.
## It uses the `FA2_config` to decide whether to set the right-comb layouts.
class Batch_transfer:
    def __init__(self, config):
        self.config = config
    def get_transfer_type(self):
        tx_type = sp.TRecord(to_ = sp.TAddress,
                             token_id = token_id_type,
                             amount = sp.TNat)
        if self.config.force_layouts:
            tx_type = tx_type.layout(
                ("to_", ("token_id", "amount"))
            )
        transfer_type = sp.TRecord(from_ = sp.TAddress,
                                   txs = sp.TList(tx_type)).layout(
                                       ("from_", "txs"))
        return transfer_type
    def get_type(self):
        return sp.TList(self.get_transfer_type())
    def item(self, from_, txs):
        v = sp.record(from_ = from_, txs = txs)
        return sp.set_type_expr(v, self.get_transfer_type())
##
## `Operator_param` defines type types for the `%update_operators` entry-point.
class Operator_param:
    def __init__(self, config):
        self.config = config
    def get_type(self):
        t = sp.TRecord(
            owner = sp.TAddress,
            operator = sp.TAddress,
            token_id = token_id_type)
        if self.config.force_layouts:
            t = t.layout(("owner", ("operator", "token_id")))
        return t
    def make(self, owner, operator, token_id):
        r = sp.record(owner = owner,
                      operator = operator,
                      token_id = token_id)
        return sp.set_type_expr(r, self.get_type())

## The class `Ledger_key` defines the key type for the main ledger (big-)map:
##
## - In *“Babylon mode”* we also have to call `sp.pack`.
## - In *“single-asset mode”* we can just use the user's address.
class Ledger_key:
    def __init__(self, config):
        self.config = config
    def make(self, user, token):
        user = sp.set_type_expr(user, sp.TAddress)
        token = sp.set_type_expr(token, token_id_type)
        if self.config.single_asset:
            result = user
        else:
            result = sp.pair(user, token)
        if self.config.readable:
            return result
        else:
            return sp.pack(result)

## For now a value in the ledger is just the user's balance. Previous
## versions of the specification required more information; potential
## extensions may require other fields.
class Ledger_value:
    def get_type():
        return sp.TRecord(balance = sp.TNat)
    def make(balance):
        return sp.record(balance = balance)

## The link between operators and the addresses they operate is kept
## in a *lazy set* of `(owner × operator × token-id)` values.
##
## A lazy set is a big-map whose keys are the elements of the set and
## values are all `Unit`.
class Operator_set:
    def __init__(self, config):
        self.config = config
    def inner_type(self):
        return sp.TRecord(owner = sp.TAddress,
                          operator = sp.TAddress,
                          token_id = token_id_type
                          ).layout(("owner", ("operator", "token_id")))
    def key_type(self):
        if self.config.readable:
            return self.inner_type()
        else:
            return sp.TBytes
    def make(self):
        return self.config.my_map(tkey = self.key_type(), tvalue = sp.TUnit)
    def make_key(self, owner, operator, token_id):
        metakey = sp.record(owner = owner,
                            operator = operator,
                            token_id = token_id)
        metakey = sp.set_type_expr(metakey, self.inner_type())
        if self.config.readable:
            return metakey
        else:
            return sp.pack(metakey)
    def add(self, set, owner, operator, token_id):
        set[self.make_key(owner, operator, token_id)] = sp.unit
    def remove(self, set, owner, operator, token_id):
        del set[self.make_key(owner, operator, token_id)]
    def is_member(self, set, owner, operator, token_id):
        return set.contains(self.make_key(owner, operator, token_id))

class Balance_of:
    def request_type():
        return sp.TRecord(
            owner = sp.TAddress,
            token_id = token_id_type).layout(("owner", "token_id"))
    def response_type():
        return sp.TList(
            sp.TRecord(
                request = Balance_of.request_type(),
                balance = sp.TNat).layout(("request", "balance")))
    def entry_point_type():
        return sp.TRecord(
            callback = sp.TContract(Balance_of.response_type()),
            requests = sp.TList(Balance_of.request_type())
        ).layout(("requests", "callback"))

class Token_meta_data:
    def __init__(self, config):
        self.config = config
    def get_type(self):
        return sp.TRecord(token_id = token_id_type, token_info = sp.TMap(sp.TString, sp.TBytes))
    def set_type_and_layout(self, expr):
        sp.set_type(expr, self.get_type())

## The set of all tokens is represented by a `nat` if we assume that token-ids
## are consecutive, or by an actual `(set nat)` if not.
##
## - Knowing the set of tokens is useful for throwing accurate error messages.
## - Previous versions of the specification required this set for functional
##   behavior (operators interface had to deal with “all tokens”).
class Token_id_set:
    def __init__(self, config):
        self.config = config
    def empty(self):
        if self.config.assume_consecutive_token_ids:
            # The "set" is its cardinal.
            return sp.nat(0)
        else:
            return sp.set(t = token_id_type)
    def add(self, metaset, v):
        if self.config.assume_consecutive_token_ids:
            sp.verify(metaset == v, message = "Token-IDs should be consecutive")
            metaset.set(sp.max(metaset, v + 1))
        else:
            metaset.add(v)
    def contains(self, metaset, v):
        if self.config.assume_consecutive_token_ids:
            return (v < metaset)
        else:
            return metaset.contains(v)
    def cardinal(self, metaset):
        if self.config.assume_consecutive_token_ids:
            return metaset
        else:
            return sp.len(metaset)

##
## ## Implementation of the Contract
##
## `mutez_transfer` is an optional entry-point, hence we define it “outside” the
## class:
def mutez_transfer(contract, params):
    sp.verify(sp.sender == contract.data.administrator)
    sp.set_type(params.destination, sp.TAddress)
    sp.set_type(params.amount, sp.TMutez)
    sp.send(params.destination, params.amount)
##
## The `FA2` class builds a contract according to an `FA2_config` and an
## administrator address.
## It is inheriting from `FA2_core` which implements the strict
## standard and a few other classes to add other common features.
##
## - We see the use of
##   [`sp.entry_point`](https://smartpy.io/docs/introduction/entry_points)
##   as a function instead of using annotations in order to allow
##   optional entry points.
## - The storage field `metadata_string` is a placeholder, the build
##   system replaces the field annotation with a specific version-string, such
##   as `"version_20200602_tzip_b916f32"`: the version of FA2-smartpy and
##   the git commit in the TZIP [repository](https://gitlab.com/tzip/tzip) that
##   the contract should obey.
class FA2_core(sp.Contract):
    def __init__(self, config, metadata, **extra_storage):
        self.config = config
        self.error_message = Error_message(self.config)
        self.operator_set = Operator_set(self.config)
        self.operator_param = Operator_param(self.config)
        self.token_id_set = Token_id_set(self.config)
        self.ledger_key = Ledger_key(self.config)
        self.token_meta_data = Token_meta_data(self.config)
        self.batch_transfer    = Batch_transfer(self.config)
        if  self.config.add_mutez_transfer:
            self.transfer_mutez = sp.entry_point(mutez_transfer)
        if config.lazy_entry_points:
            self.add_flag("lazy-entry-points")
        self.add_flag("initial-cast")
        self.exception_optimization_level = "default-line"
        self.init(
            ledger = self.config.my_map(tvalue = Ledger_value.get_type()),
            token_metadata = self.config.my_map(tkey = token_id_type, tvalue = self.token_meta_data.get_type()),
            operators = self.operator_set.make(),
            all_tokens = self.token_id_set.empty(),
            metadata = metadata,
            **extra_storage
        )
        if self.config.store_total_supply:
            self.update_initial_storage(
                total_supply = self.config.my_map(tkey = token_id_type, tvalue = sp.TNat),
            )

    #@sp.entry_point
    def transfer(self, params):
        sp.verify( ~self.is_paused(), message = self.error_message.paused() )
        sp.set_type(params, self.batch_transfer.get_type())
        sp.for transfer in params:
           current_from = transfer.from_
           sp.for tx in transfer.txs:
                if self.config.single_asset:
                    sp.verify(tx.token_id == 0, message = "single-asset: token-id <> 0")

                sender_verify = ((self.is_administrator(sp.sender)) |
                                (current_from == sp.sender))
                message = self.error_message.not_owner()
                if self.config.support_operator:
                    message = self.error_message.not_operator()
                    sender_verify |= (self.operator_set.is_member(self.data.operators,
                                                                  current_from,
                                                                  sp.sender,
                                                                  tx.token_id))
                if self.config.allow_self_transfer:
                    sender_verify |= (sp.sender == sp.self_address)
                sp.verify(sender_verify, message = message)
                sp.verify(
                    self.data.token_metadata.contains(tx.token_id),
                    message = self.error_message.token_undefined()
                )
                # If amount is 0 we do nothing now:
                sp.if (tx.amount > 0):
                    from_user = self.ledger_key.make(current_from, tx.token_id)
                    sp.verify(
                        (self.data.ledger[from_user].balance >= tx.amount),
                        message = self.error_message.insufficient_balance())
                    to_user = self.ledger_key.make(tx.to_, tx.token_id)
                    self.data.ledger[from_user].balance = sp.as_nat(
                        self.data.ledger[from_user].balance - tx.amount)
                    sp.if self.data.ledger.contains(to_user):
                        self.data.ledger[to_user].balance += tx.amount
                    sp.else:
                         self.data.ledger[to_user] = Ledger_value.make(tx.amount)
                sp.else:
                    pass

    #@sp.entry_point
    def balance_of(self, params):
        # paused may mean that balances are meaningless:
        sp.verify( ~self.is_paused(), message = self.error_message.paused())
        sp.set_type(params, Balance_of.entry_point_type())
        def f_process_request(req):
            user = self.ledger_key.make(req.owner, req.token_id)
            sp.verify(self.data.token_metadata.contains(req.token_id), message = self.error_message.token_undefined())
            sp.if self.data.ledger.contains(user):
                balance = self.data.ledger[user].balance
                sp.result(
                    sp.record(
                        request = sp.record(
                            owner = sp.set_type_expr(req.owner, sp.TAddress),
                            token_id = sp.set_type_expr(req.token_id, sp.TNat)),
                        balance = balance))
            sp.else:
                sp.result(
                    sp.record(
                        request = sp.record(
                            owner = sp.set_type_expr(req.owner, sp.TAddress),
                            token_id = sp.set_type_expr(req.token_id, token_id_type)),
                        balance = 0))
        res = sp.local("responses", params.requests.map(f_process_request))
        destination = sp.set_type_expr(params.callback, sp.TContract(Balance_of.response_type()))
        sp.transfer(res.value, sp.mutez(0), destination)

    @sp.offchain_view(pure = True)
    def get_balance(self, req):
        """This is the `get_balance` view defined in TZIP-12."""
        sp.set_type(
            req, sp.TRecord(
                owner = sp.TAddress,
                token_id = token_id_type
            ).layout(("owner", "token_id")))
        user = self.ledger_key.make(req.owner, req.token_id)
        sp.verify(self.data.token_metadata.contains(req.token_id), message = self.error_message.token_undefined())
        sp.result(self.data.ledger[user].balance)


    #@sp.entry_point
    def update_operators(self, params):
        sp.set_type(params, sp.TList(
            sp.TVariant(
                add_operator = self.operator_param.get_type(),
                remove_operator = self.operator_param.get_type()
            )
        ))
        if self.config.support_operator:
            sp.for update in params:
                with update.match_cases() as arg:
                    with arg.match("add_operator") as upd:
                        sp.verify(
                            (upd.owner == sp.sender) | self.is_administrator(sp.sender),
                            message = self.error_message.not_admin_or_operator()
                        )
                        self.operator_set.add(self.data.operators,
                                              upd.owner,
                                              upd.operator,
                                              upd.token_id)
                    with arg.match("remove_operator") as upd:
                        sp.verify(
                            (upd.owner == sp.sender) | self.is_administrator(sp.sender),
                            message = self.error_message.not_admin_or_operator()
                        )
                        self.operator_set.remove(self.data.operators,
                                                 upd.owner,
                                                 upd.operator,
                                                 upd.token_id)
        else:
            sp.failwith(self.error_message.operators_unsupported())

    # this is not part of the standard but can be supported through inheritance.
    def is_paused(self):
        return sp.bool(False)

    # this is not part of the standard but can be supported through inheritance.
    def is_administrator(self, sender):
        return sp.bool(False)

class FA2_administrator(FA2_core):
    def is_administrator(self, sender):
        return sender == self.data.administrator

    @sp.entry_point
    def set_administrator(self, params):
        sp.verify(self.is_administrator(sp.sender), message = self.error_message.not_admin())
        self.data.administrator = params

class FA2_pause(FA2_core):
    def is_paused(self):
        return self.data.paused

    @sp.entry_point
    def set_pause(self, params):
        sp.verify(self.is_administrator(sp.sender), message = self.error_message.not_admin())
        self.data.paused = params

class FA2_change_metadata(FA2_core):
    @sp.entry_point
    def set_metadata(self, k, v):
        sp.verify(self.is_administrator(sp.sender), message = self.error_message.not_admin())
        self.data.metadata[k] = v

class FA2_mint(FA2_core):
    #@sp.entry_point
    def mint(self, params):
        sp.verify(self.is_administrator(sp.sender), message = self.error_message.not_admin())
        # We don't check for pauseness because we're the admin.
        self.private_mint(params)

    def private_mint(self, params):
        if self.config.single_asset:
            sp.verify(params.token_id == 0, message = "single-asset: token-id <> 0")
        if self.config.non_fungible:
            sp.verify(params.amount == 1, message = "NFT-asset: amount <> 1")
            sp.verify(
                ~ self.token_id_set.contains(self.data.all_tokens, params.token_id),
                message = "NFT-asset: cannot mint twice same token"
            )
        user = self.ledger_key.make(params.address, params.token_id)
        self.token_id_set.add(self.data.all_tokens, params.token_id)
        sp.if self.data.ledger.contains(user):
            self.data.ledger[user].balance += params.amount
        sp.else:
            self.data.ledger[user] = Ledger_value.make(params.amount)
        sp.if self.data.token_metadata.contains(params.token_id):
            if self.config.store_total_supply:
                self.data.total_supply[params.token_id] = params.amount
        sp.else:
            self.data.token_metadata[params.token_id] = sp.record(
                token_id    = params.token_id,
                token_info  = params.metadata
            )
            if self.config.store_total_supply:
                self.data.total_supply[params.token_id] = params.amount

class FA2_token_metadata(FA2_core):
    def set_token_metadata_view(self):
        def token_metadata(self, tok):
            """
            Return the token-metadata URI for the given token.

        For a reference implementation, dynamic-views seem to be the
            most flexible choice.
            """
            sp.set_type(tok, token_id_type)
            sp.result(self.data.token_metadata[tok])
        self.token_metadata = sp.offchain_view(pure = True, doc = "Get Token Metadata")(token_metadata)

    def make_metadata(symbol, name, decimals):
        "Helper function to build metadata JSON bytes values."
        return (sp.map(l = {
            # Remember that michelson wants map already in ordered
            "decimals" : sp.utils.bytes_of_string("%d" % decimals),
            "name" : sp.utils.bytes_of_string(name),
            "symbol" : sp.utils.bytes_of_string(symbol)
        }))

    def make_uri_metadata(metadata_uri: sp.TBytes):
        "Helper function to build NFT metadata JSON bytes values with an external URI."
        return (sp.map(l = {
            "" : metadata_uri,
        }))


class FA2(FA2_change_metadata, FA2_token_metadata, FA2_mint, FA2_administrator, FA2_pause, FA2_core):

    @sp.offchain_view(pure = True)
    def count_tokens(self):
        """Get how many tokens are in this FA2 contract.
        """
        sp.result(self.token_id_set.cardinal(self.data.all_tokens))

    @sp.offchain_view(pure = True)
    def does_token_exist(self, tok):
        "Ask whether a token ID is exists."
        sp.set_type(tok, token_id_type)
        sp.result(self.data.token_metadata.contains(tok))

    @sp.offchain_view(pure = True)
    def all_tokens(self):
        if self.config.assume_consecutive_token_ids:
            sp.result(sp.range(0, self.data.all_tokens))
        else:
            sp.result(self.data.all_tokens.elements())

    @sp.offchain_view(pure = True)
    def total_supply(self, tok):
        if self.config.store_total_supply:
            sp.result(self.data.total_supply[tok])
        else:
            sp.set_type(tok, token_id_type)
            sp.result("total-supply not supported")

    @sp.offchain_view(pure = True)
    def is_operator(self, query):
        sp.set_type(query,
                    sp.TRecord(token_id = token_id_type,
                               owner = sp.TAddress,
                               operator = sp.TAddress).layout(
                                   ("owner", ("operator", "token_id"))))
        sp.result(
            self.operator_set.is_member(self.data.operators,
                                        query.owner,
                                        query.operator,
                                        query.token_id)
        )

    def __init__(self, config, metadata, admin):
        # Let's show off some meta-programming:
        if config.assume_consecutive_token_ids:
            self.all_tokens.doc = """
            This view is specified (but optional) in the standard.

            This contract is built with assume_consecutive_token_ids =
            True, so we return a list constructed from the number of tokens.
            """
        else:
            self.all_tokens.doc = """
            This view is specified (but optional) in the standard.

            This contract is built with assume_consecutive_token_ids =
            False, so we convert the set of tokens from the storage to a list
            to fit the expected type of TZIP-16.
            """
        list_of_views = [
            self.get_balance
            , self.does_token_exist
            , self.count_tokens
            , self.all_tokens
            , self.is_operator
        ]
        if config.store_total_supply:
            list_of_views = list_of_views + [self.total_supply]
        if config.use_token_metadata_offchain_view:
            self.set_token_metadata_view()
            list_of_views = list_of_views + [self.token_metadata]
        metadata_base = {
            "version": config.name # will be changed if using fatoo.
            , "description" : (
                "This is a didactic reference implementation of FA2,"
                + " a.k.a. TZIP-012, using SmartPy.\n\n"
                + "This particular contract uses the configuration named: "
                + config.name + "."
            )
            , "interfaces": ["TZIP-012", "TZIP-016"]
            , "authors": [
                "Seb Mondet <https://seb.mondet.org>"
            ]
            , "homepage": "https://gitlab.com/smondet/fa2-smartpy"
            , "views": list_of_views
            , "source": {
                "tools": ["SmartPy"]
                , "location": "https://gitlab.com/smondet/fa2-smartpy.git"
            }
            , "permissions": {
                "operator":
                "owner-or-operator-transfer" if config.support_operator else "owner-transfer"
                , "receiver": "owner-no-hook"
                , "sender": "owner-no-hook"
            }
            , "fa2-smartpy": {
                "configuration" :
                dict([(k, getattr(config, k)) for k in dir(config) if "__" not in k and k != 'my_map'])
            }
        }
        self.init_metadata("metadata_base", metadata_base)
        FA2_core.__init__(self, config, metadata, paused = False, administrator = admin)




##############################################################################
##############################################################################
################################## MULTISIG ##################################
##############################################################################
##############################################################################

participants_type = sp.TRecord(
    address = sp.TAddress,
    has_voted = sp.TBool, # Should be always initialized to False
)

## if :
# - action_to_perform == 'mint' :
#     * First participant is NFT Operator
#     * Second participant is NFT Owner
#     * param1 is asset_id
#     * param2 is Link to metadata (in Bytes)
#     * addr1 is operator
#     * addr2 is nft_owner
contract_type = sp.TRecord(
    weight = sp.TNat, # Number of participants that have signed. Should be always initialized to 0
    threshold = sp.TNat, # Number of signatures required
    participants = sp.TList(participants_type),
    ok = sp.TBool, # True means that the contract is signed by enough participants. Should be always initialised to False
    action_to_perform = sp.TString,
    ## Params
    param1 = sp.TString,
    param2 = sp.TBytes,
    addr1 = sp.TAddress,
    addr2 = sp.TAddress
)


class MultiSigFactory(sp.Contract, FA2):
    def __init__(self):
        self.update_initial_storage(
            multisigs = sp.big_map(
                tkey = sp.TNat, ## The contract_id
                tvalue = contract_type
            ),
            multisig_counter = 0
        )

    #@sp.entry_point THAT IS NOT AN ENTRY_POINT BECAUSE WE DON'T WANT THAT ANYONE CAN BUILD (else, anyone can build a "nft_creation" that will implies anyone can mint any nft for any ASSET_ID)
    # Return the contract_id that has been created
    def build(self, contract: contract_type):
        self.data.multisigs[self.data.multisig_counter] = contract
        self.data.multisig_counter += 1
        return sp.as_nat(self.data.multisig_counter - 1)

    #@sp.entry_point
    def sign(self, id: sp.TAddress, contract_id: sp.TNat):
        sp.verify(id == sp.sender)
        contract = self.data.multisigs[contract_id]
        sp.for participant in contract.participants:
            sp.if participant.address == id:
                sp.verify(~ participant.has_voted)
                participant.has_voted = True
                contract.weight += 1
                sp.if ~contract.ok & (contract.threshold <= contract.weight):
                    contract.ok = True
                    self.on_ok(contract)

    def on_ok(self, contract: contract_type):
        sp.if contract.action_to_perform == "mint":
            metadata = PASSPORT.make_uri_metadata(
                contract.param2
            )
            self.private_mint(sp.record(
                address = contract.addr2,
                amount = 1,
                metadata = metadata,
                token_id = self.data.all_tokens
            ))


##############################################################################
##############################################################################
########################### BUSINESS : PASSPORT ##############################
##############################################################################
##############################################################################

nft_creation_type = sp.TRecord(
    nft_owner_address = sp.TAddress,
    asset_id = sp.TString,
    metadata_uri = sp.TBytes
)

nft_creation_consent_type = sp.TRecord(
    contract_id = sp.TNat
)

organization_value_type = sp.TRecord(
    roles = sp.TSet(sp.TNat),  # organization role (1: DSP, 2: BSP)
    legal_name = sp.TString,
    address = sp.TAddress,
    encryption_key = sp.TString, # TODO this can be off-chain
)

organizations_type = sp.TMap(
    sp.TAddress,
    organization_value_type
)


nft_indexer_token_type = sp.TRecord(
    token_key_ref = sp.TNat,
    asset_id = sp.TString,
    token_owner_address = sp.TAddress
)

nft_indexer_type = sp.TRecord(
    tokens = sp.TSet(nft_indexer_token_type),
    unsigned_multisigs = sp.TSet(sp.TNat)
)


class NFT_Creation_Management(sp.Contract, FA2, MultiSigFactory):
    def __init__(self, _org: organizations_type):
        self.update_initial_storage(
            organizations = _org,
            nft_indexer = sp.big_map(
                tkey = sp.TAddress, ## The operator address
                tvalue = nft_indexer_type
            ),
            token_id_by_asset_id = sp.big_map(
                tkey = sp.TString,
                tvalue = token_id_type
            ),
        )
    def add_token_in_nft_indexer(self, adr, token_id, asset_id, token_owner_address):
        token_info = sp.record(
            token_key_ref = token_id,
            asset_id = asset_id,
            token_owner_address = token_owner_address
        )
        sp.if self.data.nft_indexer.contains(adr):
            sp.if sp.len(self.data.nft_indexer[adr].tokens.elements()) != 0:
                self.data.nft_indexer[adr].tokens.add(token_info)
            sp.else:
                self.data.nft_indexer[adr].tokens = sp.set([token_info])
        sp.else:
            self.data.nft_indexer[adr] = sp.record(
                unsigned_multisigs = sp.set(l=[], t = sp.TNat),
                tokens = sp.set(l = [token_info], t = nft_indexer_token_type)
            )

    def add_unsigned_multisig_in_nft_indexer(self, adr, multisig_id):
        sp.if self.data.nft_indexer.contains(adr):
            sp.if sp.len(self.data.nft_indexer[adr].unsigned_multisigs.elements()) != 0:
                self.data.nft_indexer[adr].unsigned_multisigs.add(multisig_id)
            sp.else:
                self.data.nft_indexer[adr].unsigned_multisigs = sp.set([multisig_id])
        sp.else:
            self.data.nft_indexer[adr] = sp.record(
                unsigned_multisigs = sp.set(l=[multisig_id], t = sp.TNat),
                tokens = sp.set(l = [], t = nft_indexer_token_type)
            )


    @sp.entry_point
    def init_passport_creation(self, params: nft_creation_type):
        sp.verify(self.data.organizations.contains(sp.sender))
        sp.verify(self.data.organizations[sp.sender].roles.contains(1))
        sp.verify(~ self.data.token_id_by_asset_id.contains(params.asset_id), message = "EXISTING_TOKEN_WITH_THE_SAME_ASSET_ID")

        contract = sp.record(
            weight = 1, # The NFT operator signs
            threshold = 2,
            participants = [
                sp.record(
                    address = sp.sender,
                    has_voted = True, # The NFT Operator signs
                ),
                sp.record(
                    address = params.nft_owner_address,
                    has_voted = False
                )
            ],
            ok = False,
            action_to_perform = 'mint',
            param1 = params.asset_id,
            param2 = params.metadata_uri,
            addr1 = sp.sender,
            addr2 = params.nft_owner_address
        )
        contract_id = self.build(contract)

        ### Update indexers
        #index waiting_consent Passport
        self.add_unsigned_multisig_in_nft_indexer(sp.sender, contract_id)

    @sp.entry_point
    def passport_consent(self, params: nft_creation_consent_type):
        multisig = self.data.multisigs[params.contract_id]
        operator_address = multisig.addr1
        nft_owner_address = multisig.addr2
        sp.verify(sp.sender == nft_owner_address)
        self.sign(nft_owner_address, params.contract_id)
        created_token_id = self.data.all_tokens
        ### Operator
        self.update_operators([
                sp.variant("add_operator", self.operator_param.make(
                    owner = nft_owner_address,
                    operator = operator_address,
                    token_id = created_token_id
                ))
            ])
        ### Update indexers
        #index token_id by asset_id
        self.data.token_id_by_asset_id[multisig.param1] = created_token_id
        #remove indexed waiting_consent NFT
        self.data.nft_indexer[operator_address].unsigned_multisigs.remove(params.contract_id)
        #index NFT
        self.add_token_in_nft_indexer(operator_address, created_token_id, multisig.param1, nft_owner_address)



##############################################################################
##############################################################################
############################### PASSPORT CLASS ###############################
##############################################################################
##############################################################################

class PASSPORT(FA2, MultiSigFactory, NFT_Creation_Management):
    def __init__(self, config, metadata, admin, orgs):
        FA2.__init__(self, config, metadata, admin)
        MultiSigFactory.__init__(self)
        NFT_Creation_Management.__init__(self, orgs)




##############################################################################
##############################################################################
################################### TESTS ####################################
##############################################################################
##############################################################################


## ### Generation of Test Scenarios
##
## Tests are also parametrized by the `FA2_config` object.
## The best way to visualize them is to use the online IDE
## (<https://www.smartpy.io/dev/>).
def add_test(config, is_default = True):
    @sp.add_test(name = config.name, is_default = is_default)
    def test():
        scenario = sp.test_scenario()
        scenario.h1("FA2 Contract Name: " + config.name)
        scenario.table_of_contents()
        # sp.test_account generates ED25519 key-pairs deterministically:
        admin = sp.address("tz1NSuGfg7Tfy8WUxrqWjRSVtTtW8HCMUegV") # ADMIN ADDRESS
        alice = sp.test_account("Alice")
        bob   = sp.test_account("Bob")
        # Let's display the accounts:
        scenario.h2("Accounts")
        scenario.show([alice, bob])

        #### INIT ORGANIZATIONS ###
        orga_DSPConsortium1 = sp.record(
            legal_name = 'DSPConsortium1',
            address = sp.address('tz1NSuGfg7Tfy8WUxrqWjRSVtTtW8HCMUegV'),
            encryption_key = 'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzEi+JDOxh+ENuGfl7hpGlRp/iSwG7L2Z1pRhfTt4vDAqi/bN2T/BhjzMhYZrYLQXi3CvYC3WOGqKj94Hi3SgYqkEZ1c1MihE4+7bN+DrCR11YItCVPL2Oac99mO/3MqxMajH/mfJAIZcy8P5Ey6hFLnGbdtW6vXXc25BLhoJoWLxgkh5I/DvBK4p0zfwqRUokEsy5Fcndy81DZUcGnqIhaL7Y48Sdhe9K3tEdZWoQAVZIgloZAxfaFIryYOqOS6kJxzItQRDesl7nIGnQUWoW0Qwh3q+GAMeYllxzITMf+Ti++kQOVVVZvyoJO+dRMncOqL496SmFGcp5jpKZkNh6wIDAQAB',
            roles = {1}
        )
        orga_BSPConsortium2 = sp.record(
            legal_name = 'BSPConsortium2',
            address = sp.address('tz1QdgwqsVV7SmpFPrWjs9B5oBNcj2brzqfG'),
            encryption_key = 'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAsCSS6ayF41KEOOxaTVdnO5SulP7EnFFxjs6E7i8HSDxYgoLQTlqPycvp86dcfRwLPtySP1EHHtTKEsQmPnaWA7npBEwkTmg9VkFseetmph6h2GiaCcxhOpRnpYEfCtjlF89OPVZPU3lvIeQCZhud/YaGk/4+8I1ZRHgEwhJXXc3MFr9V71k8jGxj/Sbmy0v5ATzzMmCchi1MGvH9acZy2UUSczO8O7burs5SrRpxY9JmAV/tFy1cnYwsPrs25XklI/x6KS/fZneybEJZ0QHNQLUEkKgqZOeNc7aK8TWX2ZTvjMnCfp1zhR2sFtXNMSja/fA9H/1UcR8j3cu4qaI1ewIDAQAB',
            roles = {2}
        )
        organizations = sp.map(
            {
                orga_DSPConsortium1.address: orga_DSPConsortium1,
                orga_BSPConsortium2.address: orga_BSPConsortium2
            }
        )
        ###########################
        c1 = PASSPORT(config = config,
                 metadata = sp.utils.metadata_of_url("https://example.com"),
                 admin = admin,
                 orgs = organizations)
        scenario += c1


        ## FA2 tests
        '''
        scenario.h2("Initial Minting")
        scenario.p("Give Nation creates token cards by minting amount 0 for admin account.")
        tok0_md1 = COLLABORATE.make_metadata(
            name = "The Token Hero 1",
            decimals = 2,
            symbol= "Hero1" )
        scenario += c1.mint(sp.record(address = alice.address,
                        amount = 1,
                        metadata = tok0_md1,
                        token_id = 0)).run(sender = admin)
        tok0_md2 = COLLABORATE.make_metadata(
            name = "The Token Hero 2",
            decimals = 2,
            symbol= "Hero2" )
        scenario += c1.mint(sp.record(address = bob.address,
                        amount = 1,
                        metadata = tok0_md2,
                        token_id = 1)).run(sender = admin)

        scenario.h2("Alice transfers her token to Bob")
        scenario += c1.transfer(
            [
                sp.record(from_ = alice.address,
                                    txs = [
                                        sp.record(to_ = bob.address,
                                                  amount = 1,
                                                  token_id = 0),
                                    ])
            ]).run(sender = alice)
        '''



        ## PASSPORT test
        scenario.h2("Passport creation")
        scenario.p("DSPConsortium1 can create a Passport")
        scenario += c1.init_passport_creation(sp.record(
                        nft_owner_address = alice.address,
                        asset_id = "5YJSA1DG9DFP14705",
                        metadata_uri = sp.utils.bytes_of_string("my-url://abc")
                    )).run(sender = orga_DSPConsortium1.address)

        scenario.p("DSPConsortium1 can create many passport for the same UUID")
        scenario += c1.init_passport_creation(sp.record(
                        nft_owner_address = alice.address,
                        asset_id = "5YJSA1DG9DFP14708",
                        metadata_uri = sp.utils.bytes_of_string("my-url://abcdef")
                    )).run(sender = orga_DSPConsortium1.address)

        scenario.p("Alice cannot create a Passport")
        scenario += c1.init_passport_creation(sp.record(
                        nft_owner_address = alice.address,
                        asset_id = "5YJSA1DG9DFP14709",
                        metadata_uri = sp.utils.bytes_of_string("my-url://abcdefghi")
                    )).run(sender = alice, valid = False)

        scenario.p("BSPConsortium2 cannot create a Passport")
        scenario += c1.init_passport_creation(sp.record(
                        nft_owner_address = alice.address,
                        asset_id = "5YJSA1DG9DFP14710",
                        metadata_uri = sp.utils.bytes_of_string("my-url://abcdefghijkl")
                    )).run(sender = orga_BSPConsortium2.address, valid = False)

        ## PASSPORT test : number 2
        scenario.h2("Passport creation : number 2")
        scenario += c1.init_passport_creation(sp.record(
                        nft_owner_address = alice.address,
                        asset_id = "6ZKTB2EH0REZ63895",
                        metadata_uri = sp.utils.bytes_of_string("my-url://abcabc")
                    )).run(sender = orga_DSPConsortium1.address)


        ## PASSPORT test : number 3
        scenario.h2("Passport creations : number 3")
        scenario += c1.init_passport_creation(sp.record(
                        nft_owner_address = bob.address,
                        asset_id = "3EZGD4GO0DKS24456",
                        metadata_uri = sp.utils.bytes_of_string("my-url://abcabcabc")
                    )).run(sender = orga_DSPConsortium1.address)


        ## Alice signs
        scenario.h2("Alice sign passport creation")
        sig = sp.record(
            contract_id = 0
        )
        scenario += c1.passport_consent(sig).run(sender = alice)


        ## Bob signs
        scenario.h2("Bob sign passport creation")
        sig = sp.record(
            contract_id = 3
        )
        scenario += c1.passport_consent(sig).run(sender = bob)

        ## Bob signs two times
        scenario.h2("Bob sign passport creation two times : can not vote two times")
        sig = sp.record(
            contract_id = 3
        )
        scenario += c1.passport_consent(sig).run(sender = bob, valid = False)

        ## Bob signs consent a passport creation that is not for himself : error !
        scenario.h2("Bob consents a passport creation that is not for himself")
        sig = sp.record(
            contract_id = 2
        )
        scenario += c1.passport_consent(sig).run(sender = bob, valid = False)

        ## DSPConsortium1 try to create a passport for an asset_id that corresponds to a NFT already minted
        scenario.p("DSPConsortium1 can not create a passport for an asset_id that corresponds to a NFT already minted")
        scenario += c1.init_passport_creation(sp.record(
                        nft_owner_address = bob.address,
                        asset_id = "3EZGD4GO0DKS24456",
                        metadata_uri = sp.utils.bytes_of_string("my-url://abcabcabc")
                    )).run(sender = orga_DSPConsortium1.address, valid = False)

##
## ## Global Environment Parameters
##
## The build system communicates with the python script through
## environment variables.
## The function `environment_config` creates an `FA2_config` given the
## presence and values of a few environment variables.
def global_parameter(env_var, default):
    try:
        if os.environ[env_var] == "true" :
            return True
        if os.environ[env_var] == "false" :
            return False
        return default
    except:
        return default

def environment_config():
    return FA2_config(
        debug_mode = global_parameter("debug_mode", False),
        single_asset = global_parameter("single_asset", False),
        non_fungible = global_parameter("non_fungible", True),
        add_mutez_transfer = global_parameter("add_mutez_transfer", False),
        readable = global_parameter("readable", True),
        force_layouts = global_parameter("force_layouts", True),
        support_operator = global_parameter("support_operator", True),
        assume_consecutive_token_ids =
            global_parameter("assume_consecutive_token_ids", True),
        store_total_supply = global_parameter("store_total_supply", False),
        lazy_entry_points = global_parameter("lazy_entry_points", False),
        allow_self_transfer = global_parameter("allow_self_transfer", False),
        use_token_metadata_offchain_view = global_parameter("use_token_metadata_offchain_view", True),
    )

## ## Standard “main”
##
## This specific main uses the relative new feature of non-default tests
## for the browser version.
if "templates" not in __name__:
    add_test(environment_config())
