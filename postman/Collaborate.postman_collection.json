{
	"info": {
		"_postman_id": "b37b1852-1c7e-4bc3-9189-5f08bca962c6",
		"name": "Collaborate",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "dApp",
			"item": [
				{
					"name": "Keycloak API",
					"item": [
						{
							"name": "Init admin user",
							"item": [
								{
									"name": "Setup - Get Keycloak Admin token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let response = pm.response.json();",
													"tests['Request resulted in 200 OK'] = responseCode.code === 200;",
													"pm.globals.set(\"keycloak-admin-token\", response.access_token);",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "username",
													"value": "{{dAppKeycloakUsername}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{dAppKeycloakPassword}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "admin-cli",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{dAppKeycloakUrl}}/auth/realms/master/protocol/openid-connect/token",
											"host": [
												"{{dAppKeycloakUrl}}"
											],
											"path": [
												"auth",
												"realms",
												"master",
												"protocol",
												"openid-connect",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Setup - Update admin roles",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"tests['Update of  admin roles resulted in 204 OK'] = responseCode.code === 204;"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{keycloak-admin-token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"id\": \"8928458f-9ccb-4292-ae08-b84eec9a0ab9\",\n        \"name\": \"data_service_provider_administrator\",\n        \"containerId\": \"{{dAppKeycloakRealm}}\"\n    }\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{dAppKeycloakUrl}}/auth/admin/realms/{{dAppKeycloakRealm}}/users/879acf43-8988-44ca-844a-19c84d7379b4/role-mappings/realm",
											"host": [
												"{{dAppKeycloakUrl}}"
											],
											"path": [
												"auth",
												"admin",
												"realms",
												"{{dAppKeycloakRealm}}",
												"users",
												"879acf43-8988-44ca-844a-19c84d7379b4",
												"role-mappings",
												"realm"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Token - Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let response = pm.response.json();",
													"pm.globals.set(\"dAppToken\", response.access_token);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{dapp-dsp-admin-user}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{dapp-dsp-admin-password}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{dAppKeycloakFrontendClientId}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{dAppKeycloakUrl}}/auth/realms/{{dAppKeycloakRealm}}/protocol/openid-connect/token",
											"host": [
												"{{dAppKeycloakUrl}}"
											],
											"path": [
												"auth",
												"realms",
												"{{dAppKeycloakRealm}}",
												"protocol",
												"openid-connect",
												"token"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get Token - Fabien - Identity Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json();",
											"pm.globals.set(\"dAppToken\", response.access_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{dapp-identity-admin-user}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{dapp-identity-admin-password}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{dAppKeycloakFrontendClientId}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dAppKeycloakUrl}}/auth/realms/{{dAppKeycloakRealm}}/protocol/openid-connect/token",
									"host": [
										"{{dAppKeycloakUrl}}"
									],
									"path": [
										"auth",
										"realms",
										"{{dAppKeycloakRealm}}",
										"protocol",
										"openid-connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Token - Sam - DSP Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json();",
											"pm.globals.set(\"dAppToken\", response.access_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{dapp-dsp-admin-user}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{dapp-dsp-admin-password}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{dAppKeycloakFrontendClientId}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dAppKeycloakUrl}}/auth/realms/{{dAppKeycloakRealm}}/protocol/openid-connect/token",
									"host": [
										"{{dAppKeycloakUrl}}"
									],
									"path": [
										"auth",
										"realms",
										"{{dAppKeycloakRealm}}",
										"protocol",
										"openid-connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Token - Alice",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json();",
											"pm.globals.set(\"dAppToken\", response.access_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "alice",
											"type": "text"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{dAppKeycloakFrontendClientId}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dAppKeycloakUrl}}/auth/realms/{{dAppKeycloakRealm}}/protocol/openid-connect/token",
									"host": [
										"{{dAppKeycloakUrl}}"
									],
									"path": [
										"auth",
										"realms",
										"{{dAppKeycloakRealm}}",
										"protocol",
										"openid-connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Authorization Server Metadata",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{dAppKeycloakUrl}}/auth/realms/{{dAppKeycloakRealm}}/.well-known/openid-configuration",
									"host": [
										"{{dAppKeycloakUrl}}"
									],
									"path": [
										"auth",
										"realms",
										"{{dAppKeycloakRealm}}",
										".well-known",
										"openid-configuration"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get users",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{keycloak-admin-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{dAppKeycloakUrl}}/auth/realms/{{dAppKeycloakRealm}}/custom-api/users?paged=true&sorted=false&pageNumber=0&offset=0&pageSize=10",
									"host": [
										"{{dAppKeycloakUrl}}"
									],
									"path": [
										"auth",
										"realms",
										"{{dAppKeycloakRealm}}",
										"custom-api",
										"users"
									],
									"query": [
										{
											"key": "paged",
											"value": "true"
										},
										{
											"key": "sorted",
											"value": "false"
										},
										{
											"key": "pageNumber",
											"value": "0"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user by e-mail",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{keycloak-admin-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{dAppKeycloakUrl}}/auth/admin/realms/{{dAppKeycloakRealm}}/users?email=pcc-development@theblockchainxdev.com",
									"host": [
										"{{dAppKeycloakUrl}}"
									],
									"path": [
										"auth",
										"admin",
										"realms",
										"{{dAppKeycloakRealm}}",
										"users"
									],
									"query": [
										{
											"key": "email",
											"value": "pcc-development@theblockchainxdev.com"
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{dAppToken}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Collaborate API",
					"item": [
						{
							"name": "User",
							"item": [
								{
									"name": "Create TAG user, as pending_asset_owner",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{dAppApiUrl}}/api/v1/users/tag/asset-owner",
											"host": [
												"{{dAppApiUrl}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												"tag",
												"asset-owner"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get users",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{dAppApiUrl}}/api/v1/users?page=0&size=10",
											"host": [
												"{{dAppApiUrl}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get user by id",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{dAppApiUrl}}/api/v1/users?page=0&size=10",
											"host": [
												"{{dAppApiUrl}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Datasource",
							"item": [
								{
									"name": "Personnal data",
									"item": [
										{
											"name": "Create BasicAuth datasource",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"tests['Request resulted in 201 Created'] = responseCode.code === 201;",
															"let response = pm.response.json();",
															"pm.globals.set(\"test-datasource-id\", response.id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "pfxFile",
															"type": "file",
															"src": "data/datasource/MWPDRV01.pfx"
														},
														{
															"key": "datasource",
															"contentType": "application/json",
															"type": "file",
															"src": "data/datasource/digital-passport-valid.json"
														}
													]
												},
												"url": {
													"raw": "{{dAppApiUrl}}/api/v1/datasources",
													"host": [
														"{{dAppApiUrl}}"
													],
													"path": [
														"api",
														"v1",
														"datasources"
													]
												}
											},
											"response": []
										},
										{
											"name": "Test connection BasicAuth",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"tests['Request resulted in 200 OK'] = responseCode.code === 200;"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "pfxFile",
															"type": "file",
															"src": "data/datasource/MWPDRV01.pfx"
														},
														{
															"key": "datasource",
															"contentType": "application/json",
															"type": "file",
															"src": "data/datasource/digital-passport-valid.json"
														}
													]
												},
												"url": {
													"raw": "{{dAppApiUrl}}/api/v1/datasources/test-connection",
													"host": [
														"{{dAppApiUrl}}"
													],
													"path": [
														"api",
														"v1",
														"datasources",
														"test-connection"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Business Data",
									"item": [
										{
											"name": "Create Business data OAuth2 datasource",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"tests['Request resulted in 201 Created'] = responseCode.code === 201;",
															"let response = pm.response.json();",
															"pm.globals.set(\"test-datasource-id\", response.id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "datasource",
															"contentType": "application/json",
															"type": "file",
															"src": "data/datasource/fake-datasource-dsp-a.json"
														}
													]
												},
												"url": {
													"raw": "{{dAppApiUrl}}/api/v1/datasources",
													"host": [
														"{{dAppApiUrl}}"
													],
													"path": [
														"api",
														"v1",
														"datasources"
													]
												}
											},
											"response": []
										},
										{
											"name": "Test connection OAuth2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"tests['Request resulted in 200 OK'] = responseCode.code === 200;"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "datasource",
															"contentType": "application/json",
															"type": "file",
															"src": "data/datasource/fake-datasource-dsp-a.json"
														}
													]
												},
												"url": {
													"raw": "{{dAppApiUrl}}/api/v1/datasources/test-connection",
													"host": [
														"{{dAppApiUrl}}"
													],
													"path": [
														"api",
														"v1",
														"datasources",
														"test-connection"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get datasources",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"tests['Request resulted in 200 OK'] = responseCode.code === 200;",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{dAppToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{dAppApiUrl}}/api/v1/datasources",
											"host": [
												"{{dAppApiUrl}}"
											],
											"path": [
												"api",
												"v1",
												"datasources"
											],
											"query": [
												{
													"key": "page",
													"value": "1",
													"disabled": true
												},
												{
													"key": "size",
													"value": "1",
													"disabled": true
												},
												{
													"key": "sort",
													"value": "id,desc",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get datasource",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"tests['Request resulted in 200 OK'] = responseCode.code === 200;",
													"",
													"let response = pm.response.json();",
													"tests['Request result contains datasourceId'] = response.id === pm.globals.get(\"test-datasource-id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{dAppApiUrl}}/api/v1/datasources/{{test-datasource-id}}",
											"host": [
												"{{dAppApiUrl}}"
											],
											"path": [
												"api",
												"v1",
												"datasources",
												"{{test-datasource-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get scopes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"tests['Request resulted in 200 OK'] = responseCode.code === 200;",
													"",
													"let response = pm.response.json();",
													"tests['Request result contains datasourceId'] = response.id === pm.globals.get(\"test-datasource-id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{dAppApiUrl}}/api/v1/datasources/{{test-datasource-id}}/scopes",
											"host": [
												"{{dAppApiUrl}}"
											],
											"path": [
												"api",
												"v1",
												"datasources",
												"{{test-datasource-id}}",
												"scopes"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Gateway",
							"item": [
								{
									"name": "DSP1-DigitalPasssportDatasource",
									"item": [
										{
											"name": "Test connection",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"tests['Request resulted in 200 OK'] = responseCode.code === 200;"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{dAppApiUrl}}/api/v1/gateway/datasource/{{test-datasource-id}}/purpose:test-connection",
													"host": [
														"{{dAppApiUrl}}"
													],
													"path": [
														"api",
														"v1",
														"gateway",
														"datasource",
														"{{test-datasource-id}}",
														"purpose:test-connection"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get odometer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"tests['Request resulted in 200 OK'] = responseCode.code === 200;"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{dAppApiUrl}}/api/v1/gateway/datasource/{{test-datasource-id}}/scope:metric:odometer/124091f9115613c465747647191cfa4d0d97bc3e1e4ae2f1cb3d192c3c36e183e6620c36bd6bb6d0115a436ce28529b79",
													"host": [
														"{{dAppApiUrl}}"
													],
													"path": [
														"api",
														"v1",
														"gateway",
														"datasource",
														"{{test-datasource-id}}",
														"scope:metric:odometer",
														"124091f9115613c465747647191cfa4d0d97bc3e1e4ae2f1cb3d192c3c36e183e6620c36bd6bb6d0115a436ce28529b79"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "DSP1-BusinessDataDatasource",
									"item": [
										{
											"name": "Test connection",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"tests['Request resulted in 200 OK'] = responseCode.code === 200;"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{dAppApiUrl}}/api/v1/gateway/datasource/{{test-datasource-id}}/purpose/test-connection",
													"host": [
														"{{dAppApiUrl}}"
													],
													"path": [
														"api",
														"v1",
														"gateway",
														"datasource",
														"{{test-datasource-id}}",
														"purpose",
														"test-connection"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "IPFS",
							"item": [
								{
									"name": "ls",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"tests['Request resulted in 200 OK'] = responseCode.code === 200;",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.globals.set(\"test-assetId\", utils.generatePassportId());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{dAppApiUrl}}/api/v1/ipfs/ls/bafybeihkoviema7g3gxyt6la7vd5ho32ictqbilu3wnlo3rs7ewhnp7lly",
											"host": [
												"{{dAppApiUrl}}"
											],
											"path": [
												"api",
												"v1",
												"ipfs",
												"ls",
												"bafybeihkoviema7g3gxyt6la7vd5ho32ictqbilu3wnlo3rs7ewhnp7lly"
											]
										}
									},
									"response": []
								},
								{
									"name": "add",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"tests['Request resulted in 200 OK'] = responseCode.code === 200;",
													"",
													"pm.globals.set(\"cid\", pm.response.json().Hash);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "data/datasource/digital-passport-valid.json"
												}
											]
										},
										"url": {
											"raw": "{{dAppApiUrl}}/api/v1/ipfs/add",
											"host": [
												"{{dAppApiUrl}}"
											],
											"path": [
												"api",
												"v1",
												"ipfs",
												"add"
											]
										}
									},
									"response": []
								},
								{
									"name": "cat",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"tests['Request resulted in 200 OK'] = responseCode.code === 200;",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"vehicleOwnerMail\": \"pcc-development@theblockchainxdev.com\",\n    \"datasourceUUID\": \"{{test-datasource-id}}\",\n    \"assetId\": \"{{test-assetId}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{dAppApiUrl}}/api/v1/ipfs/cat/{{cid}}",
											"host": [
												"{{dAppApiUrl}}"
											],
											"path": [
												"api",
												"v1",
												"ipfs",
												"cat",
												"{{cid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "publish",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"tests['Request resulted in 200 OK'] = responseCode.code === 200;",
													"",
													"pm.globals.set(\"ipns\", pm.response.json().Name);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{dAppApiUrl}}/api/v1/ipfs/publish/{{cid}}",
											"host": [
												"{{dAppApiUrl}}"
											],
											"path": [
												"api",
												"v1",
												"ipfs",
												"publish",
												"{{cid}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Organization",
							"item": [
								{
									"name": "Get organizations",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{dAppApiUrl}}/api/v1/organizations",
											"host": [
												"{{dAppApiUrl}}"
											],
											"path": [
												"api",
												"v1",
												"organizations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get current organization",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{dAppApiUrl}}/api/v1/organizations",
											"host": [
												"{{dAppApiUrl}}"
											],
											"path": [
												"api",
												"v1",
												"organizations"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Passport",
							"item": [
								{
									"name": "multisig",
									"item": [
										{
											"name": "Get details by multisigId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"tests['Request resulted in 200 OK'] = responseCode.code === 200;",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{dAppApiUrl}}/api/v1/digital-passport/multisig/29",
													"host": [
														"{{dAppApiUrl}}"
													],
													"path": [
														"api",
														"v1",
														"digital-passport",
														"multisig",
														"29"
													]
												}
											},
											"response": []
										},
										{
											"name": "Consent  passport",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"tests['Request resulted in 200 OK'] = responseCode.code === 200;",
															"",
															"pm.globals.set(\"tag-job-id\", pm.response.json().id);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{dAppApiUrl}}/api/v1/digital-passport/multisig/30",
													"host": [
														"{{dAppApiUrl}}"
													],
													"path": [
														"api",
														"v1",
														"digital-passport",
														"multisig",
														"30"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "metric",
									"item": [
										{
											"name": "Get metrics by tokenId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"tests['Request resulted in 200 OK'] = responseCode.code === 200;",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{dAppApiUrl}}/api/v1/digital-passport/7/metrics/",
													"host": [
														"{{dAppApiUrl}}"
													],
													"path": [
														"api",
														"v1",
														"digital-passport",
														"7",
														"metrics",
														""
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Create passport, as DSP",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"tests['Request resulted in 200 OK'] = responseCode.code === 200;",
													"",
													"pm.globals.set(\"tag-job-id\", pm.response.json().id);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.globals.set(\"test-assetId\", utils.generatePassportId());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"assetOwnerMail\": \"alice@asset-owner.com\",\n    \"datasourceUUID\": \"{{test-datasource-id}}\",\n    \"assetId\": \"{{test-assetId}}\",\n    \"assetIdForDatasource\": \"124091f9115613c465747647191cfa4d0d97bc3e1e4ae2f1cb3d192c3c36e183e6620c36bd6bb6d0115a436ce28529b79\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{dAppApiUrl}}/api/v1/digital-passport",
											"host": [
												"{{dAppApiUrl}}"
											],
											"path": [
												"api",
												"v1",
												"digital-passport"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get passports",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"tests['Request resulted in 200 OK'] = responseCode.code === 200;",
													"var jsonData = pm.response.json();",
													"console.log(jsonData[jsonData.length-1])",
													"var pendingSortedByContractIdDesc = jsonData",
													"    .sort(function(a, b) {return b.contractId - a.contractId})",
													"    .filter(passport => passport.status == 'PENDING_CREATION');",
													"",
													"pm.globals.set(\"test-last-passport-contract-id\", pendingSortedByContractIdDesc[0].contractId);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{dAppApiUrl}}/api/v1/digital-passport",
											"host": [
												"{{dAppApiUrl}}"
											],
											"path": [
												"api",
												"v1",
												"digital-passport"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get passport by token id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"tests['Request resulted in 200 OK'] = responseCode.code === 200;",
													"var jsonData = pm.response.json();",
													"console.log(jsonData[jsonData.length-1])",
													"var pendingSortedByContractIdDesc = jsonData",
													"    .sort(function(a, b) {return b.contractId - a.contractId})",
													"    .filter(passport => passport.status == 'PENDING_CREATION');",
													"",
													"pm.globals.set(\"test-last-passport-contract-id\", pendingSortedByContractIdDesc[0].contractId);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{dAppApiUrl}}/api/v1/digital-passport/2",
											"host": [
												"{{dAppApiUrl}}"
											],
											"path": [
												"api",
												"v1",
												"digital-passport",
												"2"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Tests suites",
							"item": [
								{
									"name": "COL-215 Asset owner first login",
									"item": [
										{
											"name": "Setup - Create DSP Admin",
											"item": [
												{
													"name": "Setup - Get Keycloak Admin token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let response = pm.response.json();",
																	"tests['Request resulted in 200 OK'] = responseCode.code === 200;",
																	"pm.globals.set(\"keycloak-admin-token\", response.access_token);",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "username",
																	"value": "{{dAppKeycloakUsername}}",
																	"type": "text"
																},
																{
																	"key": "password",
																	"value": "{{dAppKeycloakPassword}}",
																	"type": "text"
																},
																{
																	"key": "client_id",
																	"value": "admin-cli",
																	"type": "text"
																},
																{
																	"key": "grant_type",
																	"value": "password",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{dAppKeycloakUrl}}/auth/realms/master/protocol/openid-connect/token",
															"host": [
																"{{dAppKeycloakUrl}}"
															],
															"path": [
																"auth",
																"realms",
																"master",
																"protocol",
																"openid-connect",
																"token"
															]
														}
													},
													"response": []
												},
												{
													"name": "Setup - Create DSP user",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.globals.get(\"test-dsp-email\");",
																	"tests['Creation of ' + user + ' resulted in 201 OK'] = responseCode.code === 201;"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"function generateEmail(){",
																	"    let timestamp = new Date().getTime();",
																	"    return \"dsp@\"+timestamp+\".test\";",
																	"}",
																	"",
																	"let email = generateEmail();",
																	"pm.globals.set(\"test-dsp-email\", email);",
																	"pm.globals.set(\"test-dsp-username\", email);",
																	"pm.globals.set(\"test-dsp-password\", \"password\");",
																	"pm.globals.set(\"test-dsp-vault-id\", email.toVaultId());",
																	"",
																	"// Roles must be assigned in a separate request"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{keycloak-admin-token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"email\": \"{{test-dsp-email}}\",\n    \"username\": \"{{test-dsp-email}}\",\n    \"enabled\": true,\n    \"emailVerified\": true,\n    \"credentials\":[{\n        \"type\": \"password\",\n        \"value\":\"{{test-dsp-password}}\",\n        \"temporary\":false\n    }]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{dAppKeycloakUrl}}/auth/admin/realms/{{dAppKeycloakRealm}}/users",
															"host": [
																"{{dAppKeycloakUrl}}"
															],
															"path": [
																"auth",
																"admin",
																"realms",
																"{{dAppKeycloakRealm}}",
																"users"
															]
														}
													},
													"response": []
												},
												{
													"name": "Setup - Get DSP user id",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let response = pm.response.json();",
																	"let userId = response[0].id;",
																	"let email = pm.globals.get(\"test-dsp-email\")",
																	"",
																	"tests['Id of ' + email + ' is '+ userId] = responseCode.code === 200;",
																	"pm.globals.set(\"test-dsp-id\", userId)"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{keycloak-admin-token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{dAppKeycloakUrl}}/auth/admin/realms/{{dAppKeycloakRealm}}/users?email={{test-dsp-email}}",
															"host": [
																"{{dAppKeycloakUrl}}"
															],
															"path": [
																"auth",
																"admin",
																"realms",
																"{{dAppKeycloakRealm}}",
																"users"
															],
															"query": [
																{
																	"key": "email",
																	"value": "{{test-dsp-email}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Setup - Update DSP roles",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.globals.get(\"test-asset-owner-email\");",
																	"tests['Update of ' + user + 'roles resulted in 204 OK'] = responseCode.code === 204;"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{keycloak-admin-token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "[\n    {\n        \"id\": \"8928458f-9ccb-4292-ae08-b84eec9a0ab9\",\n        \"name\": \"data_service_provider_administrator\",\n        \"containerId\": \"{{dAppKeycloakRealm}}\"\n    }\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{dAppKeycloakUrl}}/auth/admin/realms/{{dAppKeycloakRealm}}/users/{{test-dsp-id}}/role-mappings/realm",
															"host": [
																"{{dAppKeycloakUrl}}"
															],
															"path": [
																"auth",
																"admin",
																"realms",
																"{{dAppKeycloakRealm}}",
																"users",
																"{{test-dsp-id}}",
																"role-mappings",
																"realm"
															]
														}
													},
													"response": []
												},
												{
													"name": "Setup - Get DSP Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"tests['Get DSP token resulted in 200 OK'] = responseCode.code === 200;",
																	"let response = pm.response.json();",
																	"pm.globals.set(\"test-dsp-token\", response.access_token);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "grant_type",
																	"value": "password",
																	"type": "text"
																},
																{
																	"key": "username",
																	"value": "{{test-dsp-username}}",
																	"type": "text"
																},
																{
																	"key": "password",
																	"value": "{{test-dsp-password}}",
																	"type": "text"
																},
																{
																	"key": "client_id",
																	"value": "{{dAppKeycloakFrontendClientId}}",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{dAppKeycloakUrl}}/auth/realms/{{dAppKeycloakRealm}}/protocol/openid-connect/token",
															"host": [
																"{{dAppKeycloakUrl}}"
															],
															"path": [
																"auth",
																"realms",
																"{{dAppKeycloakRealm}}",
																"protocol",
																"openid-connect",
																"token"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "As pending_asset_owner, I do first login",
											"item": [
												{
													"name": "Setup - Get Keycloak Admin token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let response = pm.response.json();",
																	"tests['Request resulted in 200 OK'] = responseCode.code === 200;",
																	"pm.globals.set(\"keycloak-admin-token\", response.access_token);",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "username",
																	"value": "{{dAppKeycloakUsername}}",
																	"type": "text"
																},
																{
																	"key": "password",
																	"value": "{{dAppKeycloakPassword}}",
																	"type": "text"
																},
																{
																	"key": "client_id",
																	"value": "admin-cli",
																	"type": "text"
																},
																{
																	"key": "grant_type",
																	"value": "password",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{dAppKeycloakUrl}}/auth/realms/master/protocol/openid-connect/token",
															"host": [
																"{{dAppKeycloakUrl}}"
															],
															"path": [
																"auth",
																"realms",
																"master",
																"protocol",
																"openid-connect",
																"token"
															]
														}
													},
													"response": []
												},
												{
													"name": "Setup - Create asset owner user",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.globals.get(\"test-asset-owner-email\");",
																	"tests['Creation of ' + user + ' resulted in 201 OK'] = responseCode.code === 201;"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"function generateEmail(){",
																	"    let timestamp = new Date().getTime();",
																	"    return \"asset-owner@\"+timestamp+\".test\";",
																	"}",
																	"",
																	"let email = generateEmail();",
																	"pm.globals.set(\"test-asset-owner-email\", email);",
																	"pm.globals.set(\"test-asset-owner-username\", email);",
																	"pm.globals.set(\"test-asset-owner-password\", \"password\");",
																	"pm.globals.set(\"test-asset-owner-vault-id\", email.toVaultId());",
																	"",
																	"// Roles must be assigned in a separate request"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{keycloak-admin-token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"email\": \"{{test-asset-owner-email}}\",\n    \"username\": \"{{test-asset-owner-email}}\",\n    \"enabled\": true,\n    \"emailVerified\": true,\n    \"credentials\":[{\n        \"type\": \"password\",\n        \"value\":\"{{test-asset-owner-password}}\",\n        \"temporary\":false\n    }],\n    \"realmRoles\":[\"pending_asset_owner\"]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{dAppKeycloakUrl}}/auth/admin/realms/{{dAppKeycloakRealm}}/users",
															"host": [
																"{{dAppKeycloakUrl}}"
															],
															"path": [
																"auth",
																"admin",
																"realms",
																"{{dAppKeycloakRealm}}",
																"users"
															]
														}
													},
													"response": []
												},
												{
													"name": "Setup - Get asset owner id",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let response = pm.response.json();",
																	"let userId = response[0].id;",
																	"let email = pm.globals.get(\"test-asset-owner-email\")",
																	"",
																	"tests['Id of ' + email + ' is '+ userId] = responseCode.code === 200;",
																	"pm.globals.set(\"test-asset-owner-id\", userId)"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{keycloak-admin-token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{dAppKeycloakUrl}}/auth/admin/realms/{{dAppKeycloakRealm}}/users?email={{test-asset-owner-email}}",
															"host": [
																"{{dAppKeycloakUrl}}"
															],
															"path": [
																"auth",
																"admin",
																"realms",
																"{{dAppKeycloakRealm}}",
																"users"
															],
															"query": [
																{
																	"key": "email",
																	"value": "{{test-asset-owner-email}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Setup - Update asset owner roles",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.globals.get(\"test-asset-owner-email\");",
																	"tests['Update of ' + user + 'roles resulted in 204 OK'] = responseCode.code === 204;"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// Roles must be assigned in a separate request",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{keycloak-admin-token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "[\n    {\n        \"id\": \"d7732aa5-f408-4248-96aa-f0ec4c7fd41a\",\n        \"name\": \"pending_asset_owner\",\n        \"containerId\": \"{{dAppKeycloakRealm}}\"\n    }\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{dAppKeycloakUrl}}/auth/admin/realms/{{dAppKeycloakRealm}}/users/{{test-asset-owner-id}}/role-mappings/realm",
															"host": [
																"{{dAppKeycloakUrl}}"
															],
															"path": [
																"auth",
																"admin",
																"realms",
																"{{dAppKeycloakRealm}}",
																"users",
																"{{test-asset-owner-id}}",
																"role-mappings",
																"realm"
															]
														}
													},
													"response": []
												},
												{
													"name": "Setup - Get asset owner token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let response = pm.response.json();",
																	"pm.globals.set(\"test-asset-owner-token\", response.access_token);",
																	"tests['Request resulted in 200 OK'] = responseCode.code === 200;"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "grant_type",
																	"value": "password",
																	"type": "text"
																},
																{
																	"key": "username",
																	"value": "{{test-asset-owner-username}}",
																	"type": "text"
																},
																{
																	"key": "password",
																	"value": "{{test-asset-owner-password}}",
																	"type": "text"
																},
																{
																	"key": "client_id",
																	"value": "{{dAppKeycloakFrontendClientId}}",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{dAppKeycloakUrl}}/auth/realms/{{dAppKeycloakRealm}}/protocol/openid-connect/token",
															"host": [
																"{{dAppKeycloakUrl}}"
															],
															"path": [
																"auth",
																"realms",
																"{{dAppKeycloakRealm}}",
																"protocol",
																"openid-connect",
																"token"
															]
														}
													},
													"response": []
												},
												{
													"name": "As pending asset owner,  I create my TAG user AND get asset_owner role",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.globals.get(\"test-asset-owner-email\");",
																	"tests['Update of ' + user + 'results in 200 OK'] = responseCode.code === 200;"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{test-asset-owner-token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{dAppApiUrl}}/api/v1/users/tag/asset-owner",
															"host": [
																"{{dAppApiUrl}}"
															],
															"path": [
																"api",
																"v1",
																"users",
																"tag",
																"asset-owner"
															]
														}
													},
													"response": []
												},
												{
													"name": "Setup - Get asset owner publicKey",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"tests['Request resulted in 200 OK'] = responseCode.code === 200;",
																	"",
																	"let response = pm.response.json();",
																	"pm.globals.set(\"test-asset-owner-publicKeyHash\", response[0].account);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{tagApiUrl}}/api/user?userIdList={{test-asset-owner-vault-id}}",
															"host": [
																"{{tagApiUrl}}"
															],
															"path": [
																"api",
																"user"
															],
															"query": [
																{
																	"key": "userIdList",
																	"value": "{{test-asset-owner-vault-id}}"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "As asset_owner, create TAG user should be forbidden",
											"item": [
												{
													"name": "Get asset owner token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let response = pm.response.json();",
																	"pm.globals.set(\"test-asset-owner-token\", response.access_token);",
																	"tests['Request resulted in 200 OK'] = responseCode.code === 200;"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "grant_type",
																	"value": "password",
																	"type": "text"
																},
																{
																	"key": "username",
																	"value": "{{test-asset-owner-username}}",
																	"type": "text"
																},
																{
																	"key": "password",
																	"value": "{{test-asset-owner-password}}",
																	"type": "text"
																},
																{
																	"key": "client_id",
																	"value": "{{dAppKeycloakFrontendClientId}}",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{dAppKeycloakUrl}}/auth/realms/{{dAppKeycloakRealm}}/protocol/openid-connect/token",
															"host": [
																"{{dAppKeycloakUrl}}"
															],
															"path": [
																"auth",
																"realms",
																"{{dAppKeycloakRealm}}",
																"protocol",
																"openid-connect",
																"token"
															]
														}
													},
													"response": []
												},
												{
													"name": "As asset owner,  I create my TAG user AND get asset_owner role",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.globals.get(\"test-asset-owner-email\");",
																	"tests['Update of ' + user + 'results in 403 Forbidden'] = responseCode.code === 403;"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{test-asset-owner-token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{dAppApiUrl}}/api/v1/users/tag/asset-owner",
															"host": [
																"{{dAppApiUrl}}"
															],
															"path": [
																"api",
																"v1",
																"users",
																"tag",
																"asset-owner"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "COL-148 As a DSP, I want to create a BasicAuth Datasource",
									"item": [
										{
											"name": "GIVEN Invalid passphrase",
											"item": [
												{
													"name": "Setup - Get DSP Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"tests['Get DSP token resulted in 200 OK'] = responseCode.code === 200;",
																	"let response = pm.response.json();",
																	"pm.globals.set(\"test-dsp-token\", response.access_token);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "grant_type",
																	"value": "password",
																	"type": "text"
																},
																{
																	"key": "username",
																	"value": "{{test-dsp-username}}",
																	"type": "text"
																},
																{
																	"key": "password",
																	"value": "{{test-dsp-password}}",
																	"type": "text"
																},
																{
																	"key": "client_id",
																	"value": "{{dAppKeycloakFrontendClientId}}",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{dAppKeycloakUrl}}/auth/realms/{{dAppKeycloakRealm}}/protocol/openid-connect/token",
															"host": [
																"{{dAppKeycloakUrl}}"
															],
															"path": [
																"auth",
																"realms",
																"{{dAppKeycloakRealm}}",
																"protocol",
																"openid-connect",
																"token"
															]
														}
													},
													"response": []
												},
												{
													"name": "As DSP, WHEN I add a first BasicAuth datasource with invalid pfxFile THEN the datasource is created",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"tests['Request resulted in 400 BadRequest'] = responseCode.code === 400;",
																	"",
																	"let response = pm.response.json();",
																	"let expectedResponseMessage = \"Provided passphrase can't be used to decrypt private key\";",
																	"console.log(response)",
																	"tests['Request failed with \"'+expectedResponseMessage+'\" message '] = response.message === expectedResponseMessage;",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{test-dsp-token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "pfxFile",
																	"type": "file",
																	"src": "data/datasource/selfsigned-password.pfx"
																},
																{
																	"key": "datasource",
																	"contentType": "application/json",
																	"type": "file",
																	"src": "data/datasource/wrong-passphrase.json"
																}
															]
														},
														"url": {
															"raw": "{{dAppApiUrl}}/api/v1/datasources",
															"host": [
																"{{dAppApiUrl}}"
															],
															"path": [
																"api",
																"v1",
																"datasources"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "GIVEN wrong pfxFile",
											"item": [
												{
													"name": "As DSP, WHEN I add a first BasicAuth datasource with invalid pfxFile THEN the datasource is created",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"tests['Request resulted in 400 BadRequest'] = responseCode.code === 400;",
																	"",
																	"let response = pm.response.json();",
																	"let expectedResponseMessage = \"Test connection failed\";",
																	"console.log(response)",
																	"tests['Request failed with \"'+expectedResponseMessage+'\" message '] = response.message === expectedResponseMessage;"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{test-dsp-token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "pfxFile",
																	"type": "file",
																	"src": "data/datasource/selfsigned-password.pfx"
																},
																{
																	"key": "datasource",
																	"contentType": "application/json",
																	"type": "file",
																	"src": "data/datasource/wrong-pfx-file.json"
																}
															]
														},
														"url": {
															"raw": "{{dAppApiUrl}}/api/v1/datasources",
															"host": [
																"{{dAppApiUrl}}"
															],
															"path": [
																"api",
																"v1",
																"datasources"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "GIVEN Valid data",
											"item": [
												{
													"name": "Setup - Get DSP Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"tests['Get DSP token resulted in 200 OK'] = responseCode.code === 200;",
																	"let response = pm.response.json();",
																	"pm.globals.set(\"test-dsp-token\", response.access_token);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "grant_type",
																	"value": "password",
																	"type": "text"
																},
																{
																	"key": "username",
																	"value": "{{test-dsp-username}}",
																	"type": "text"
																},
																{
																	"key": "password",
																	"value": "{{test-dsp-password}}",
																	"type": "text"
																},
																{
																	"key": "client_id",
																	"value": "{{dAppKeycloakFrontendClientId}}",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{dAppKeycloakUrl}}/auth/realms/{{dAppKeycloakRealm}}/protocol/openid-connect/token",
															"host": [
																"{{dAppKeycloakUrl}}"
															],
															"path": [
																"auth",
																"realms",
																"{{dAppKeycloakRealm}}",
																"protocol",
																"openid-connect",
																"token"
															]
														}
													},
													"response": []
												},
												{
													"name": "As DSP, I can create a valid datasource",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"tests['Request resulted in 201 Created'] = responseCode.code === 201;",
																	"let response = pm.response.json();",
																	"pm.globals.set(\"test-datasource-id\", response.id);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{test-dsp-token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "pfxFile",
																	"type": "file",
																	"src": "data/datasource/MWPDRV01.pfx"
																},
																{
																	"key": "datasource",
																	"contentType": "application/json",
																	"type": "file",
																	"src": "data/datasource/digital-passport-valid.json"
																}
															]
														},
														"url": {
															"raw": "{{dAppApiUrl}}/api/v1/datasources",
															"host": [
																"{{dAppApiUrl}}"
															],
															"path": [
																"api",
																"v1",
																"datasources"
															]
														}
													},
													"response": []
												},
												{
													"name": "Then GET datasources contains the created datasource",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"tests['Request resulted in 200 Created'] = responseCode.code === 200;",
																	"",
																	"let datasourceId = pm.globals.get(\"test-datasource-id\");",
																	"let response = pm.response.json();",
																	"response.content.find(ds => ds.id === datasourceId)",
																	"tests['Request body contains created datasourceId='+datasourceId+''] = response.content.find(ds => ds.id === datasourceId) !== undefined;",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{test-dsp-token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{dAppApiUrl}}/api/v1/datasources",
															"host": [
																"{{dAppApiUrl}}"
															],
															"path": [
																"api",
																"v1",
																"datasources"
															]
														}
													},
													"response": []
												},
												{
													"name": "Then GET datasource by id returns the datasource",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"tests['Request resulted in 200 OK'] = responseCode.code === 200;"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{test-dsp-token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{dAppApiUrl}}/api/v1/datasources/{{test-datasource-id}}",
															"host": [
																"{{dAppApiUrl}}"
															],
															"path": [
																"api",
																"v1",
																"datasources",
																"{{test-datasource-id}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "COL-158 Datasource with Traefik usage",
									"item": [
										{
											"name": "Get test-connection",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"tests['Request resulted in 200 OK'] = responseCode.code === 200;",
															"",
															"let response = pm.response.json();",
															"pm.test(\"Response total field isEqual to 2\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.total).to.eq(2);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{test-dsp-token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{dAppApiUrl}}/api/v1/gateway/datasource/{{test-datasource-id}}/purpose/test-connection",
													"host": [
														"{{dAppApiUrl}}"
													],
													"path": [
														"api",
														"v1",
														"gateway",
														"datasource",
														"{{test-datasource-id}}",
														"purpose",
														"test-connection"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get vehicle odometer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"tests['Request resulted in 200 OK'] = responseCode.code === 200;",
															"",
															"let response = pm.response.json();",
															"pm.test(\"Response total field isEqual to 2\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.assetId).to.eq(\"VR1ATTENTKW033329\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{test-dsp-token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{dAppApiUrl}}/api/v1/gateway/datasource/{{test-datasource-id}}/scope/metric/odometer/124091f9115613c465747647191cfa4d0d97bc3e1e4ae2f1cb3d192c3c36e183e6620c36bd6bb6d0115a436ce28529b79",
													"host": [
														"{{dAppApiUrl}}"
													],
													"path": [
														"api",
														"v1",
														"gateway",
														"datasource",
														"{{test-datasource-id}}",
														"scope",
														"metric",
														"odometer",
														"124091f9115613c465747647191cfa4d0d97bc3e1e4ae2f1cb3d192c3c36e183e6620c36bd6bb6d0115a436ce28529b79"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "COL-250 Use predefined organization key",
									"item": [
										{
											"name": "WHEN get admin user THEN expected key is returned",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"tests['Request resulted in 200 OK'] = responseCode.code === 200;",
															"",
															"let response = pm.response.json();",
															"tests['Request result has expected account value '] = ",
															"  response[0].account === pm.globals.get(\"tag-admin-publicKeyHash\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tagApiUrl}}/api/user?userIdList={{tag-admin}}",
													"host": [
														"{{tagApiUrl}}"
													],
													"path": [
														"api",
														"user"
													],
													"query": [
														{
															"key": "userIdList",
															"value": "{{tag-admin}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "COL-220 As DSP, I want to create Digital Passport for my client",
									"item": [
										{
											"name": "As DSP, create Digital Passport",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"tests['Request resulted in 200 OK'] = responseCode.code === 200;",
															"pm.globals.set(\"tag-job-id\", pm.response.json().id);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let assetId = utils.generatePassportId();",
															"pm.globals.set(\"test-assetId\", assetId);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{test-dsp-token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"assetOwnerMail\": \"{{test-asset-owner-email}}\",\n    \"datasourceUUID\": \"{{test-datasource-id}}\",\n    \"assetId\": \"{{test-assetId}}\",\n    \"assetIdForDatasource\": \"124091f9115613c465747647191cfa4d0d97bc3e1e4ae2f1cb3d192c3c36e183e6620c36bd6bb6d0115a436ce28529b79\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{dAppApiUrl}}/api/v1/digital-passport",
													"host": [
														"{{dAppApiUrl}}"
													],
													"path": [
														"api",
														"v1",
														"digital-passport"
													]
												}
											},
											"response": []
										},
										{
											"name": "Setup - Get asset owner token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let response = pm.response.json();",
															"pm.globals.set(\"test-asset-owner-token\", response.access_token);",
															"tests['Request resulted in 200 OK'] = responseCode.code === 200;"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "{{test-asset-owner-username}}",
															"type": "text"
														},
														{
															"key": "password",
															"value": "{{test-asset-owner-password}}",
															"type": "text"
														},
														{
															"key": "client_id",
															"value": "{{dAppKeycloakFrontendClientId}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dAppKeycloakUrl}}/auth/realms/{{dAppKeycloakRealm}}/protocol/openid-connect/token",
													"host": [
														"{{dAppKeycloakUrl}}"
													],
													"path": [
														"auth",
														"realms",
														"{{dAppKeycloakRealm}}",
														"protocol",
														"openid-connect",
														"token"
													]
												}
											},
											"response": []
										},
										{
											"name": "As asset_owner, create Digital Passport",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"tests['Request resulted in 403 Forbidden'] = responseCode.code === 403;",
															"pm.globals.set(\"tag-job-id\", pm.response.json().id);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let assetId = utils.generatePassportId();",
															"pm.globals.set(\"test-assetId\", assetId);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{test-asset-owner-token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"assetOwnerMail\": \"{{test-asset-owner-email}}\",\n    \"datasourceUUID\": \"{{test-datasource-id}}\",\n    \"assetId\": \"{{test-assetId}}\",\n    \"assetIdForDatasource\": \"124091f9115613c465747647191cfa4d0d97bc3e1e4ae2f1cb3d192c3c36e183e6620c36bd6bb6d0115a436ce28529b79\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{dAppApiUrl}}/api/v1/digital-passport",
													"host": [
														"{{dAppApiUrl}}"
													],
													"path": [
														"api",
														"v1",
														"digital-passport"
													]
												}
											},
											"response": []
										},
										{
											"name": "Setup - Get DSP Token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"tests['Get DSP token resulted in 200 OK'] = responseCode.code === 200;",
															"let response = pm.response.json();",
															"pm.globals.set(\"test-dsp-token\", response.access_token);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "{{test-dsp-username}}",
															"type": "text"
														},
														{
															"key": "password",
															"value": "{{test-dsp-password}}",
															"type": "text"
														},
														{
															"key": "client_id",
															"value": "{{dAppKeycloakFrontendClientId}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dAppKeycloakUrl}}/auth/realms/{{dAppKeycloakRealm}}/protocol/openid-connect/token",
													"host": [
														"{{dAppKeycloakUrl}}"
													],
													"path": [
														"auth",
														"realms",
														"{{dAppKeycloakRealm}}",
														"protocol",
														"openid-connect",
														"token"
													]
												}
											},
											"response": []
										},
										{
											"name": "As DSP, create Digital Passport on existing assetId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"tests['Request resulted in 409 conflicts'] = responseCode.code === 409;",
															"pm.globals.set(\"tag-job-id\", pm.response.json().id);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{test-dsp-token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"assetOwnerMail\": \"{{test-asset-owner-email}}\",\n    \"datasourceUUID\": \"{{test-datasource-id}}\",\n    \"assetId\": \"{{test-assetId}}\",\n    \"assetIdForDatasource\": \"124091f9115613c465747647191cfa4d0d97bc3e1e4ae2f1cb3d192c3c36e183e6620c36bd6bb6d0115a436ce28529b79\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{dAppApiUrl}}/api/v1/digital-passport",
													"host": [
														"{{dAppApiUrl}}"
													],
													"path": [
														"api",
														"v1",
														"digital-passport"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "COL-157 Get organizations",
									"item": [
										{
											"name": "Get organizations",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Result contains at least 2 organizations\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.length).to.greaterThan(1);",
															"",
															"    const adminOrg = jsonData.find(o => o.publicKeyHash === pm.globals.get(\"tag-admin-publicKeyHash\"));",
															"    pm.expect(adminOrg).not.eq(undefined);",
															"",
															"    const otherOrg = jsonData.find(o => o.publicKeyHash === pm.globals.get(\"tag-other-publicKeyHash\"));",
															"    pm.expect(otherOrg).not.eq(undefined);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{test-dsp-token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{dAppApiUrl}}/api/v1/organizations",
													"host": [
														"{{dAppApiUrl}}"
													],
													"path": [
														"api",
														"v1",
														"organizations"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "COL-333 IPFS",
									"item": [
										{
											"name": "ls",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"tests['Request resulted in 200 OK'] = responseCode.code === 200;",
															"",
															"pm.globals.set(\"tag-job-id\", pm.response.json().id);",
															"",
															"pm.test(\"Your test name\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.Objects[0].Hash).to.eq(\"bafybeihkoviema7g3gxyt6la7vd5ho32ictqbilu3wnlo3rs7ewhnp7lly\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.globals.set(\"test-assetId\", utils.generatePassportId());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{test-dsp-token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{dAppApiUrl}}/api/v1/ipfs/ls/bafybeihkoviema7g3gxyt6la7vd5ho32ictqbilu3wnlo3rs7ewhnp7lly",
													"host": [
														"{{dAppApiUrl}}"
													],
													"path": [
														"api",
														"v1",
														"ipfs",
														"ls",
														"bafybeihkoviema7g3gxyt6la7vd5ho32ictqbilu3wnlo3rs7ewhnp7lly"
													]
												}
											},
											"response": []
										},
										{
											"name": "add",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"tests['Request resulted in 200 OK'] = responseCode.code === 200;",
															"",
															"pm.globals.set(\"cid\", pm.response.json().Hash);",
															"pm.test(\"Response has expected body\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.Name).to.eq(\"hello-world.txt\");",
															"    pm.expect(jsonData.Hash).to.eq(\"QmQzCQn4puG4qu8PVysxZmscmQ5vT1ZXpqo7f58Uh9QfyY\");",
															"    pm.expect(jsonData.Size).to.eq(20);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.globals.set(\"test-assetId\", utils.generatePassportId());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{test-dsp-token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"type": "file",
															"src": "data/ipfs/hello-world.txt"
														}
													]
												},
												"url": {
													"raw": "{{dAppApiUrl}}/api/v1/ipfs/add",
													"host": [
														"{{dAppApiUrl}}"
													],
													"path": [
														"api",
														"v1",
														"ipfs",
														"add"
													]
												}
											},
											"response": []
										},
										{
											"name": "cat",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"tests['Request resulted in 200 OK'] = responseCode.code === 200;",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.text()).to.eq(\"Hello world!\");",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.globals.set(\"test-assetId\", utils.generatePassportId());"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{test-dsp-token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"vehicleOwnerMail\": \"pcc-development@theblockchainxdev.com\",\n    \"datasourceUUID\": \"{{test-datasource-id}}\",\n    \"assetId\": \"{{test-assetId}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{dAppApiUrl}}/api/v1/ipfs/cat/QmQzCQn4puG4qu8PVysxZmscmQ5vT1ZXpqo7f58Uh9QfyY",
													"host": [
														"{{dAppApiUrl}}"
													],
													"path": [
														"api",
														"v1",
														"ipfs",
														"cat",
														"QmQzCQn4puG4qu8PVysxZmscmQ5vT1ZXpqo7f58Uh9QfyY"
													]
												}
											},
											"response": []
										}
									]
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{dAppToken}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"utils = {",
							"  toVaultId : function (userId){",
							"    return userId.replace('@', '_._xdev-at_._');",
							"  },",
							"  fromVaultId : function (vaultId){",
							"    return userId.replace('_._xdev-at_._', '@');",
							"  },",
							"  generatePassportId: function(){",
							"    var result           = '';",
							"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';",
							"    var charactersLength = characters.length;",
							"    for ( var i = 0; i < 17; i++ ) {",
							"      result += characters.charAt(Math.floor(Math.random() * charactersLength));",
							"    }",
							"    return result;",
							"  }",
							"}",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Tezos Api Gateway",
			"item": [
				{
					"name": "User",
					"item": [
						{
							"name": "Create user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"test-asset-owner-publicKeyHash\", jsonData[0].account);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userIdList\": [\n    \"pcc-developmenttheblockchainxdev.com\"\n  ],\n  \"secureKeyName\": \"{{tag-admin}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{tagApiUrl}}/api/user/create",
									"host": [
										"{{tagApiUrl}}"
									],
									"path": [
										"api",
										"user",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user metadata",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": \"pcc-developmenttheblockchainxdev.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{tagApiUrl}}/api/user/pcc-developmenttheblockchainxdev.com/metadata",
									"host": [
										"{{tagApiUrl}}"
									],
									"path": [
										"api",
										"user",
										"pcc-developmenttheblockchainxdev.com",
										"metadata"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET user metadata",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"test-asset-owner-publicKeyHash\", jsonData[0].account);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{tagApiUrl}}/api/user/{{test-datasource-id}}/metadata",
									"host": [
										"{{tagApiUrl}}"
									],
									"path": [
										"api",
										"user",
										"{{test-datasource-id}}",
										"metadata"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user by id",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{tagApiUrl}}/api/user?userIdList=pcc-development_._xdev-at_._theblockchainxdev.com&userIdList=admin",
									"host": [
										"{{tagApiUrl}}"
									],
									"path": [
										"api",
										"user"
									],
									"query": [
										{
											"key": "userIdList",
											"value": "pcc-development_._xdev-at_._theblockchainxdev.com"
										},
										{
											"key": "userIdList",
											"value": "admin"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user address",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{tagApiUrl}}/api/user/address?userAddressList={{tag-admin-publicKeyHash}}",
									"host": [
										"{{tagApiUrl}}"
									],
									"path": [
										"api",
										"user",
										"address"
									],
									"query": [
										{
											"key": "userAddressList",
											"value": "{{tag-admin-publicKeyHash}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Passport",
					"item": [
						{
							"name": "Create multisig",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set(\"test-assetId\", utils.generatePassportId());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.globals.set(\"tag-job-id\", pm.response.json().id);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transactions\": [\n    {\n      \"contractAddress\": \"{{passport-contract-address}}\",\n      \"entryPoint\": \"init_passport_creation\",\n      \"entryPointParams\": {\n            \"nft_owner_address\": \"{{test-asset-owner-publicKeyHash}}\",\n            \"asset_id\": \"{{test-assetId}}\",\n            \"metadata_uri\": \"{{test-metadata-uri}}\"\n      }\n    }\n  ],\n  \"callerId\": \"{{dapp-id}}\",\n  \"secureKeyName\": \"{{tag-admin}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{tagApiUrl}}/api/send/jobs?cache=false",
									"host": [
										"{{tagApiUrl}}"
									],
									"path": [
										"api",
										"send",
										"jobs"
									],
									"query": [
										{
											"key": "cache",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "findMultisigByIds",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set(\"test-assetId\", utils.generatePassportId());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.globals.set(\"tag-job-id\", pm.response.json().id);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transactions\": [\n    {\n      \"contractAddress\": \"{{passport-contract-address}}\",\n      \"entryPoint\": \"initPassportCreation\",\n      \"entryPointParams\": {\n            \"vehicle_owner_address\": \"{{test-asset-owner-publicKeyHash}}\",\n            \"assetId\": \"{{test-assetId}}\",\n            \"metadata_uri\": \"{{test-metadata-uri}}\"\n      }\n    }\n  ],\n  \"callerId\": \"{{dapp-id}}\",\n  \"secureKeyName\": \"{{tag-admin}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{tagApiUrl}}/api/send/jobs?cache=false",
									"host": [
										"{{tagApiUrl}}"
									],
									"path": [
										"api",
										"send",
										"jobs"
									],
									"query": [
										{
											"key": "cache",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get passports from indexer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Result contains at least 2 organizations\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.organizations.value.length).to.greaterThan(1);",
											"",
											"    const adminOrg = jsonData.organizations.value.find(o => o.key === pm.environment.get(\"tag-admin-publicKeyHash\"));",
											"    pm.expect(adminOrg).not.eq(undefined);",
											"",
											"    const otherOrg = jsonData.organizations.value.find(o => o.key === pm.environment.get(\"tag-other-publicKeyHash\"));",
											"    pm.expect(otherOrg).not.eq(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"dataFields\": [\n        {\n            \"nft_indexer\" : [\n                {\n                    \"key\": \"tz1NSuGfg7Tfy8WUxrqWjRSVtTtW8HCMUegV\"\n                },\n                {\n                    \"key\" : \"tz1YEAJSJ7j4HNn9adywXxtwttSSHBgyYbyT\"\n                }\n            ]\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{tagApiUrl}}/api/tezos_node/storage/{{passport-contract-address}}",
									"host": [
										"{{tagApiUrl}}"
									],
									"path": [
										"api",
										"tezos_node",
										"storage",
										"{{passport-contract-address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get passport metadata by tokenId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Result contains at least 2 organizations\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.organizations.value.length).to.greaterThan(1);",
											"",
											"    const adminOrg = jsonData.organizations.value.find(o => o.key === pm.environment.get(\"tag-admin-publicKeyHash\"));",
											"    pm.expect(adminOrg).not.eq(undefined);",
											"",
											"    const otherOrg = jsonData.organizations.value.find(o => o.key === pm.environment.get(\"tag-other-publicKeyHash\"));",
											"    pm.expect(otherOrg).not.eq(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"dataFields\": [\n        {\n            \"token_metadata\" : [\n                {\n                    \"key\": \"4\"\n                }\n            ]\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{tagApiUrl}}/api/tezos_node/storage/{{passport-contract-address}}",
									"host": [
										"{{tagApiUrl}}"
									],
									"path": [
										"api",
										"tezos_node",
										"storage",
										"{{passport-contract-address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "As Alice, I consent multisig",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.globals.set(\"tag-job-id\", pm.response.json().id);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transactions\": [\n    {\n      \"contractAddress\": \"{{passport-contract-address}}\",\n      \"entryPoint\": \"passport_consent\",\n      \"entryPointParams\": 30\n    }\n  ],\n  \"callerId\": \"test\",\n  \"secureKeyName\": \"alice_._xdev-at_._asset-owner.com\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{tagApiUrl}}/api/send/jobs?cache=false",
									"host": [
										"{{tagApiUrl}}"
									],
									"path": [
										"api",
										"send",
										"jobs"
									],
									"query": [
										{
											"key": "cache",
											"value": "false"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Organization",
					"item": [
						{
							"name": "Get all organizations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Result contains at least 2 organizations\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.organizations.value.length).to.greaterThan(1);",
											"",
											"    const adminOrg = jsonData.organizations.value.find(o => o.key === pm.environment.get(\"tag-admin-publicKeyHash\"));",
											"    pm.expect(adminOrg).not.eq(undefined);",
											"",
											"    const otherOrg = jsonData.organizations.value.find(o => o.key === pm.environment.get(\"tag-other-publicKeyHash\"));",
											"    pm.expect(otherOrg).not.eq(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"dataFields\": [\n        \"organizations\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{tagApiUrl}}/api/tezos_node/storage/{{businessdata-smart-contract-address}}",
									"host": [
										"{{tagApiUrl}}"
									],
									"path": [
										"api",
										"tezos_node",
										"storage",
										"{{businessdata-smart-contract-address}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Tests suites",
					"item": [
						{
							"name": "Get User",
							"item": [
								{
									"name": "Get admin user by id should return created user publicKey Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Result has expected publicKey\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[0].account).to.eq(",
													"        pm.environment.get(\"tag-admin-publicKeyHash\")",
													"    );",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tagApiUrl}}/api/user?userIdList={{tag-admin}}",
											"host": [
												"{{tagApiUrl}}"
											],
											"path": [
												"api",
												"user"
											],
											"query": [
												{
													"key": "userIdList",
													"value": "{{tag-admin}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "COL-215 Create asset owner user",
							"item": [
								{
									"name": "Create user should return an account publicKey",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateEmail(){",
													"    let timestamp = new Date().getTime();",
													"    return \"asset-owner_._xdev-at-_._\"+timestamp+\".test\";",
													"}",
													"",
													"let email = generateEmail();",
													"pm.environment.set(\"test-asset-owner-vault-id\", email);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response account value has 36 characters\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[0].account).not.eq(undefined);",
													"    pm.expect(jsonData[0].account.length).to.eql(36);",
													"",
													"    pm.globals.set(\"test-asset-owner-publicKeyHash\", jsonData[0].account);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"userIdList\": [\n    \"{{test-asset-owner-vault-id}}\"\n  ],\n  \"secureKeyName\": \"{{tag-admin}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tagApiUrl}}/api/user/create",
											"host": [
												"{{tagApiUrl}}"
											],
											"path": [
												"api",
												"user",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get created user by id should return created user publicKey",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Result has expected publicKey\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[0].account).to.eq(",
													"        pm.globals.get(\"test-asset-owner-publicKeyHash\")",
													"    );",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tagApiUrl}}/api/user?userIdList={{test-asset-owner-vault-id}}",
											"host": [
												"{{tagApiUrl}}"
											],
											"path": [
												"api",
												"user"
											],
											"query": [
												{
													"key": "userIdList",
													"value": "{{test-asset-owner-vault-id}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "COL-220 Create Passport multisig",
							"item": [
								{
									"name": "Entrypoint \"initPassportCreation\" exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response contains expected entrypoint\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.schema.length).to.eql(1);",
													"    pm.expect(jsonData.schema[0].entryPoint).to.eql(\"initPassportCreation\");",
													"});",
													"",
													"pm.test(\"Entrypoint expects 4 parameters\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(Object.keys(jsonData.schema[0].schema).length).to.eql(4);",
													"    pm.expect(jsonData.schema[0].schema[\"datasource_uuid\"]).to.eql(\"bytes\");",
													"    pm.expect(jsonData.schema[0].schema[\"dspAddress\"]).to.eql(\"address\");",
													"    pm.expect(jsonData.schema[0].schema[\"vehiculeOwnerAddress\"]).to.eql(\"address\");",
													"    pm.expect(jsonData.schema[0].schema[\"assetId\"]).to.eql(\"bytes\");",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tagApiUrl}}/api/entrypoints/{{passport-contract-address}}?entryPoints=initPassportCreation",
											"host": [
												"{{tagApiUrl}}"
											],
											"path": [
												"api",
												"entrypoints",
												"{{passport-contract-address}}"
											],
											"query": [
												{
													"key": "entryPoints",
													"value": "initPassportCreation"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create multisig",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"test-assetId\", utils.generatePassportId().hexEncode());",
													"pm.environment.set(\"test-uuid\", \"b6006c30-d84b-4ad7-a57b-55987c8aace7\".hexEncode());",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.globals.set(\"tag-job-id\", pm.response.json().id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transactions\": [\n    {\n      \"contractAddress\": \"{{passport-contract-address}}\",\n      \"entryPoint\": \"initPassportCreation\",\n      \"entryPointParams\": {\n            \"vehiculeOwnerAddress\": \"{{test-asset-owner-publicKeyHash}}\",\n            \"dspAddress\": \"{{tag-admin-publicKeyHash}}\",\n            \"assetId\": \"{{test-assetId}}\",\n            \"datasource_uuid\": \"{{test-uuid}}\"\n      }\n    }\n  ],\n  \"callerId\": \"{{dapp-id}}\",\n  \"secureKeyName\": \"{{tag-admin}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tagApiUrl}}/api/send/jobs",
											"host": [
												"{{tagApiUrl}}"
											],
											"path": [
												"api",
												"send",
												"jobs"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "COL-157 Get all organizations",
							"item": [
								{
									"name": "Get all organizations",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Result contains at least 2 organizations\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.organizations.value.length).to.greaterThan(1);",
													"",
													"    const adminOrg = jsonData.organizations.value.find(o => o.key === pm.environment.get(\"tag-admin-publicKeyHash\"));",
													"    pm.expect(adminOrg).not.eq(undefined);",
													"",
													"    const otherOrg = jsonData.organizations.value.find(o => o.key === pm.environment.get(\"tag-other-publicKeyHash\"));",
													"    pm.expect(otherOrg).not.eq(undefined);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"dataFields\": [\n        \"organizations\"\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tagApiUrl}}/api/tezos_node/storage/{{businsessdata-smart-contract-address}}",
											"host": [
												"{{tagApiUrl}}"
											],
											"path": [
												"api",
												"tezos_node",
												"storage",
												"{{businsessdata-smart-contract-address}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Get all entrypoints",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{tagApiUrl}}/api/entrypoints/{{passport-contract-address}}",
							"host": [
								"{{tagApiUrl}}"
							],
							"path": [
								"api",
								"entrypoints",
								"{{passport-contract-address}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Entrypoint \"requestAccess\" of a smartcontract",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{tagApiUrl}}/api/entrypoints/{{passport-contract-address}}?entryPoints=requestAccess",
							"host": [
								"{{tagApiUrl}}"
							],
							"path": [
								"api",
								"entrypoints",
								"{{passport-contract-address}}"
							],
							"query": [
								{
									"key": "entryPoints",
									"value": "requestAccess"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Storage - all",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{tagApiUrl}}/api/tezos_node/storage/{{passport-contract-address}}",
							"host": [
								"{{tagApiUrl}}"
							],
							"path": [
								"api",
								"tezos_node",
								"storage",
								"{{passport-contract-address}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Storage - one field",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"dataFields\": [\n        \"organizations\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{tagApiUrl}}/api/tezos_node/storage/KT1X2GBRQ7ADbJv9gHNKGKuGJKBgZGbcRd4U",
							"host": [
								"{{tagApiUrl}}"
							],
							"path": [
								"api",
								"tezos_node",
								"storage",
								"KT1X2GBRQ7ADbJv9gHNKGKuGJKBgZGbcRd4U"
							]
						}
					},
					"response": []
				},
				{
					"name": "Storage - map",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"dataFields\": [\n        {\n            \"organizations\" : [\n                { \"key\": \"tz1Upyf2fq4maUdW3xTQ2o56SrBePbqSsokm\" }\n            ]\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{tagApiUrl}}/api/tezos_node/storage/KT1DY2hHacAFegSjekmQPh26BUr9xetRkCZR",
							"host": [
								"{{tagApiUrl}}"
							],
							"path": [
								"api",
								"tezos_node",
								"storage",
								"KT1DY2hHacAFegSjekmQPh26BUr9xetRkCZR"
							]
						}
					},
					"response": []
				},
				{
					"name": "Storage - bigmap",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"dataFields\": [\n        {\n            \"passports_indexer\" : [\n                {\n                    \"key\": \"tz1NSuGfg7Tfy8WUxrqWjRSVtTtW8HCMUegV\"\n                }\n            ]\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{tagApiUrl}}/api/tezos_node/storage/KT1EqKH9U8nUV7msqKbUwx8SCvNXixrY3D6z",
							"host": [
								"{{tagApiUrl}}"
							],
							"path": [
								"api",
								"tezos_node",
								"storage",
								"KT1EqKH9U8nUV7msqKbUwx8SCvNXixrY3D6z"
							]
						}
					},
					"response": []
				},
				{
					"name": "Forge - not use it",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transactions\": [\n    {\n      \"contractAddress\": \"KT1DY2hHacAFegSjekmQPh26BUr9xetRkCZR\",\n      \"entryPoint\": \"requestAccess\",\n      \"entryPointParams\": {\n            \"datasourceId\": 12,\n            \"providerAddress\": \"tz1W9d1dgX5ueZkNNQaZneHt4kvrUF7XNdAW\",\n            \"requesterAddress\": \"tz1Upyf2fq4maUdW3xTQ2o56SrBePbqSsokm\",\n            \"scopeId\": \"13\"\n      }\n    }\n  ],\n  \"callerId\": \"string\",\n  \"sourceAddress\": \"tz1Upyf2fq4maUdW3xTQ2o56SrBePbqSsokm\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{tagApiUrl}}/api/forge/jobs",
							"host": [
								"{{tagApiUrl}}"
							],
							"path": [
								"api",
								"forge",
								"jobs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Inject - not use it",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "=> sign the transaction and call the endpoint...",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": ""
						}
					},
					"response": []
				},
				{
					"name": "Send",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"transactions\": [\n        {\n            \"contractAddress\": \"{{passport-contract-address}}\",\n            \"entryPoint\": \"requestAccess\",\n            \"entryPointParams\": {\n                \"id\": \"test\",\n                \"datasourceId\": 158,\n                \"providerAddress\": \"{{tag-other-publicKeyHash}}\",\n                \"requesterAddress\": \"{{tag-admin-publicKeyHash}}\",\n                \"scopeId\": \"12\"\n            }\n        }\n    ],\n    \"callerId\": \"admin\",\n    \"secureKeyName\": \"{{tag-admin}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{tagApiUrl}}/api/send/jobs",
							"host": [
								"{{tagApiUrl}}"
							],
							"path": [
								"api",
								"send",
								"jobs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Job",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{tagApiUrl}}/api/job/{{tag-job-id}}",
							"host": [
								"{{tagApiUrl}}"
							],
							"path": [
								"api",
								"job",
								"{{tag-job-id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "IPFS",
			"item": [
				{
					"name": "API",
					"item": [
						{
							"name": "config",
							"item": [
								{
									"name": "show",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.globals.set(\"cid\", jsonData.Hash);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "path",
													"value": "/data/ipfs/collaborate/xdev-test",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{ipfs-api-host}}/api/v0/config",
											"host": [
												"{{ipfs-api-host}}"
											],
											"path": [
												"api",
												"v0",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "set",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.globals.set(\"cid\", jsonData.Hash);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "path",
													"value": "/data/ipfs/collaborate/xdev-test",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{ipfs-api-host}}/api/v0/add",
											"host": [
												"{{ipfs-api-host}}"
											],
											"path": [
												"api",
												"v0",
												"add"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "files",
							"item": [
								{
									"name": "mkdir",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{ipfs-api-host}}/api/v0/files/mkdir?arg=/data/ipfs/collaborate/xdev-test&parents=true",
											"host": [
												"{{ipfs-api-host}}"
											],
											"path": [
												"api",
												"v0",
												"files",
												"mkdir"
											],
											"query": [
												{
													"key": "arg",
													"value": "/data/ipfs/collaborate/xdev-test"
												},
												{
													"key": "parents",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "write",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "data",
													"type": "file",
													"src": "data/datasource/digital-passport-valid.json"
												}
											]
										},
										"url": {
											"raw": "{{ipfs-api-host}}/api/v0/files/write?arg=/data/ipfs/collaborate/xdev-test/hello-test.json&create=true",
											"host": [
												"{{ipfs-api-host}}"
											],
											"path": [
												"api",
												"v0",
												"files",
												"write"
											],
											"query": [
												{
													"key": "arg",
													"value": "/data/ipfs/collaborate/xdev-test/hello-test.json"
												},
												{
													"key": "create",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "ls",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.globals.set(\"cid\", jsonData.Hash);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "data/datasource/digital-passport-valid.json"
												}
											]
										},
										"url": {
											"raw": "{{ipfs-api-host}}/api/v0/files/ls?arg=/data/ipfs/collaborate/xdev-test",
											"host": [
												"{{ipfs-api-host}}"
											],
											"path": [
												"api",
												"v0",
												"files",
												"ls"
											],
											"query": [
												{
													"key": "arg",
													"value": "/data/ipfs/collaborate/xdev-test"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "rm",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "data/datasource/digital-passport-valid.json"
												}
											]
										},
										"url": {
											"raw": "{{ipfs-api-host}}/api/v0/files/rm?arg=/data/ipfs/collaborate/xdev-test/hello.txt",
											"host": [
												"{{ipfs-api-host}}"
											],
											"path": [
												"api",
												"v0",
												"files",
												"rm"
											],
											"query": [
												{
													"key": "arg",
													"value": "/data/ipfs/collaborate/xdev-test/hello.txt"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "flush",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.globals.set(\"test-cid\", jsonData.Cid);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "data/datasource/digital-passport-valid.json"
												}
											]
										},
										"url": {
											"raw": "{{ipfs-api-host}}/api/v0/files/flush?arg={{ipfs-asset-data-root-dir}}",
											"host": [
												"{{ipfs-api-host}}"
											],
											"path": [
												"api",
												"v0",
												"files",
												"flush"
											],
											"query": [
												{
													"key": "arg",
													"value": "{{ipfs-asset-data-root-dir}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "read",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.globals.set(\"cid\", jsonData.Hash);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "data/datasource/digital-passport-valid.json"
												}
											]
										},
										"url": {
											"raw": "{{ipfs-api-host}}/api/v0/files/read?arg=/data/ipfs/collaborate/xdev-test/hello.txt",
											"host": [
												"{{ipfs-api-host}}"
											],
											"path": [
												"api",
												"v0",
												"files",
												"read"
											],
											"query": [
												{
													"key": "arg",
													"value": "/data/ipfs/collaborate/xdev-test/hello.txt"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "name",
							"item": [
								{
									"name": "publish on self",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.globals.set(\"test-ipns\", jsonData.Name);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{ipfs-api-host}}/api/v0/name/publish?arg={{test-cid}}",
											"host": [
												"{{ipfs-api-host}}"
											],
											"path": [
												"api",
												"v0",
												"name",
												"publish"
											],
											"query": [
												{
													"key": "arg",
													"value": "{{test-cid}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "publish on key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": []
												}
											]
										},
										"url": {
											"raw": "{{ipfs-api-host}}/api/v0/name/publish?arg={{test-cid}}&key={{ipfs-asset-data-root-dir}}",
											"host": [
												"{{ipfs-api-host}}"
											],
											"path": [
												"api",
												"v0",
												"name",
												"publish"
											],
											"query": [
												{
													"key": "arg",
													"value": "{{test-cid}}"
												},
												{
													"key": "key",
													"value": "{{ipfs-asset-data-root-dir}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "resolve",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.globals.set(\"cid\", jsonData.Hash);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": []
												},
												{
													"key": "path",
													"value": "/data/ipfs/collaborate/xdev-test/hello.txt",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{ipfs-api-host}}/api/v0/name/resolve?arg={{test-ipns}}",
											"host": [
												"{{ipfs-api-host}}"
											],
											"path": [
												"api",
												"v0",
												"name",
												"resolve"
											],
											"query": [
												{
													"key": "arg",
													"value": "{{test-ipns}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "key",
							"item": [
								{
									"name": "gen",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.globals.set(\"test-ipns\", jsonData.Id);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{ipfs-api-host}}/api/v0/key/gen?arg=metadata",
											"host": [
												"{{ipfs-api-host}}"
											],
											"path": [
												"api",
												"v0",
												"key",
												"gen"
											],
											"query": [
												{
													"key": "arg",
													"value": "metadata"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "export",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.globals.set(\"test-ipns\", jsonData.Id);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{ipfs-api-host}}/api/v0/key/list",
											"host": [
												"{{ipfs-api-host}}"
											],
											"path": [
												"api",
												"v0",
												"key",
												"list"
											]
										}
									},
									"response": []
								},
								{
									"name": "list",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.globals.set(\"test-ipns\", jsonData.Id);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{ipfs-api-host}}/api/v0/key/list",
											"host": [
												"{{ipfs-api-host}}"
											],
											"path": [
												"api",
												"v0",
												"key",
												"list"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "pin",
							"item": [
								{
									"name": "add",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.globals.set(\"cid\", jsonData.Hash);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": []
												},
												{
													"key": "path",
													"value": "/data/ipfs/collaborate/xdev-test/hello.txt",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{ipfs-api-host}}/api/v0/pin/add?arg=QmUNLLsPACCz1vLxQVkXqqLX5R1X345qqfHbsf67hvA3Nn",
											"host": [
												"{{ipfs-api-host}}"
											],
											"path": [
												"api",
												"v0",
												"pin",
												"add"
											],
											"query": [
												{
													"key": "arg",
													"value": "QmUNLLsPACCz1vLxQVkXqqLX5R1X345qqfHbsf67hvA3Nn"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "ls",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.globals.set(\"cid\", jsonData.Hash);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": []
												},
												{
													"key": "path",
													"value": "/data/ipfs/collaborate/xdev-test/hello.txt",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{ipfs-api-host}}/api/v0/pin/ls",
											"host": [
												"{{ipfs-api-host}}"
											],
											"path": [
												"api",
												"v0",
												"pin",
												"ls"
											]
										}
									},
									"response": []
								},
								{
									"name": "rm",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.globals.set(\"cid\", jsonData.Hash);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": []
												},
												{
													"key": "path",
													"value": "/data/ipfs/collaborate/xdev-test/hello.txt",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{ipfs-api-host}}/api/v0/pin/rm?arg=QmQPeNsJPyVWPFDVHb77w8G42Fvo15z4bG2X8D2GhfbSXc&arg=QmZCtuqQPBJhVZJp37vHv3CKH9bbEvJJ1ZwAQvyRY4iUAi",
											"host": [
												"{{ipfs-api-host}}"
											],
											"path": [
												"api",
												"v0",
												"pin",
												"rm"
											],
											"query": [
												{
													"key": "arg",
													"value": "QmQPeNsJPyVWPFDVHb77w8G42Fvo15z4bG2X8D2GhfbSXc"
												},
												{
													"key": "arg",
													"value": "QmZCtuqQPBJhVZJp37vHv3CKH9bbEvJJ1ZwAQvyRY4iUAi"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Tests suites",
							"item": [
								{
									"name": "Init IPNS folder",
									"item": [
										{
											"name": "files/mkdir",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.globals.set(\"test-ipfs-directory-path\", \"/data/ipfs/collaborate/xdev-test\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{ipfs-api-host}}/api/v0/files/mkdir?arg={{test-ipfs-directory-path}}&parents=true",
													"host": [
														"{{ipfs-api-host}}"
													],
													"path": [
														"api",
														"v0",
														"files",
														"mkdir"
													],
													"query": [
														{
															"key": "arg",
															"value": "{{test-ipfs-directory-path}}"
														},
														{
															"key": "parents",
															"value": "true"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "files/flush",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"    var jsonData = pm.response.json();",
															"    pm.globals.set(\"test-ipfs-cid\", jsonData.Cid);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"type": "file",
															"src": "data/datasource/psa-valid.json"
														}
													]
												},
												"url": {
													"raw": "{{ipfs-api-host}}/api/v0/files/flush?arg={{test-ipfs-directory-path}}",
													"host": [
														"{{ipfs-api-host}}"
													],
													"path": [
														"api",
														"v0",
														"files",
														"flush"
													],
													"query": [
														{
															"key": "arg",
															"value": "{{test-ipfs-directory-path}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "name/add",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"    var jsonData = pm.response.json();",
															"    pm.globals.set(\"test-ipns\", jsonData.Name);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"type": "file",
															"src": []
														},
														{
															"key": "path",
															"value": "/data/ipfs/collaborate/xdev-test/hello.txt",
															"type": "text",
															"disabled": true
														}
													]
												},
												"url": {
													"raw": "{{ipfs-api-host}}/api/v0/name/publish?arg={{test-ipfs-cid}}",
													"host": [
														"{{ipfs-api-host}}"
													],
													"path": [
														"api",
														"v0",
														"name",
														"publish"
													],
													"query": [
														{
															"key": "arg",
															"value": "{{test-ipfs-cid}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "ls IPNS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response contains the IPNS\", function () {",
															"    pm.expect(pm.response.json().Objects[0].Hash).to.eq(\"/ipns/k51qzi5uqu5djpyvngfbasc5v9yqu87ogutksm7u1uvm72ny65u1sqq9e3fa4n\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{ipfs-api-host}}/api/v0/ls?arg=/ipns/{{test-ipns}}",
													"host": [
														"{{ipfs-api-host}}"
													],
													"path": [
														"api",
														"v0",
														"ls"
													],
													"query": [
														{
															"key": "arg",
															"value": "/ipns/{{test-ipns}}"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "add path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.globals.set(\"cid\", jsonData.Hash);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "path",
											"value": "/data/ipfs/collaborate/xdev-test",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{ipfs-api-host}}/api/v0/add",
									"host": [
										"{{ipfs-api-host}}"
									],
									"path": [
										"api",
										"v0",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "add multiplart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.globals.set(\"cid\", jsonData.Hash);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": []
										},
										{
											"key": "path",
											"value": "/data/ipfs/collaborate/xdev-test/hello.txt",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{ipfs-api-host}}/api/v0/add",
									"host": [
										"{{ipfs-api-host}}"
									],
									"path": [
										"api",
										"v0",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "cat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{ipfs-api-host}}/api/v0/cat?arg={{cid}}",
									"host": [
										"{{ipfs-api-host}}"
									],
									"path": [
										"api",
										"v0",
										"cat"
									],
									"query": [
										{
											"key": "arg",
											"value": "{{cid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ls IPNS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{ipfs-api-host}}/api/v0/ls?arg=/ipns/{{test-ipns}}",
									"host": [
										"{{ipfs-api-host}}"
									],
									"path": [
										"api",
										"v0",
										"ls"
									],
									"query": [
										{
											"key": "arg",
											"value": "/ipns/{{test-ipns}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ls IPFS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{ipfs-api-host}}/api/v0/ls?arg=QmT14rktYdCX52Sd1wTnS4LAqjueXbnsVxmcDmPoVisiux",
									"host": [
										"{{ipfs-api-host}}"
									],
									"path": [
										"api",
										"v0",
										"ls"
									],
									"query": [
										{
											"key": "arg",
											"value": "QmT14rktYdCX52Sd1wTnS4LAqjueXbnsVxmcDmPoVisiux"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "resolve",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.globals.set(\"cid\", jsonData.Hash);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "path",
											"value": "/data/ipfs/collaborate/xdev-test",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{ipfs-api-host}}/api/v0/resolve?arg={{test-cid}}",
									"host": [
										"{{ipfs-api-host}}"
									],
									"path": [
										"api",
										"v0",
										"resolve"
									],
									"query": [
										{
											"key": "arg",
											"value": "{{test-cid}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"utils = {",
					"    /**",
					"     * @return a random 17 characters",
					"     */",
					"    generatePassportId: function(){",
					"        var result = '';",
					"        var characters =  'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';",
					"        var charactersLength = characters.length;",
					"        for ( var i = 0; i < 17; i++ ) {",
					"            result += characters.charAt(Math.floor(Math.random() * ",
					" charactersLength));",
					"        }",
					"        console.log(\"generatePassportId=\"+result);",
					"        return result;",
					"    },",
					"    generateUUID: function(){",
					"        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
					"            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);",
					"            return v.toString(16);",
					"        });",
					"    }",
					"}",
					"",
					"/**",
					" * @return The converted string in tag user id format",
					" */",
					"String.prototype.toVaultId = function(){",
					"    return this.replace('@', '_._xdev-at_._');",
					"}",
					"",
					"/**",
					" * @return the converted string where tag user id special token has been removed",
					" */",
					"String.prototype.fromVaultId = function(){",
					"    return this.replace('_._xdev-at_._', '@');",
					"}",
					"",
					"",
					"/**",
					" * @return The converted string in tag user id format",
					" */",
					"String.prototype.hexEncode = function(){",
					"    return this.split(\"\")",
					"     .map(c => c.charCodeAt(0).toString(16).padStart(2, \"0\"))",
					"     .join(\"\");",
					"}",
					"",
					"/**",
					" * @return The converted string in tag user id format",
					" */",
					"String.prototype.hexDecode = function(){",
					"    return this.split(/(\\w\\w)/g)",
					"   .filter(p => !!p)",
					"   .map(c => String.fromCharCode(parseInt(c, 16)))",
					"   .join(\"\")",
					"}",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "dAppKeycloakRealm",
			"value": "collaborate-dapp"
		},
		{
			"key": "dapp-dsp-admin-user",
			"value": "sam"
		},
		{
			"key": "dapp-dsp-admin-password",
			"value": "admin"
		},
		{
			"key": "dapp-identity-admin-user",
			"value": "eric"
		},
		{
			"key": "dapp-identity-admin-password",
			"value": "admin"
		},
		{
			"key": "dAppKeycloakFrontendClientId",
			"value": "frontend"
		},
		{
			"key": "ipfs-asset-data-root-dir",
			"value": "/data/ipfs/xdev/collaborate/token-metadata/asset-data-catalogs-by-token-id"
		}
	]
}