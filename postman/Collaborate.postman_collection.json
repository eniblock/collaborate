{
	"info": {
		"_postman_id": "7f065956-298a-448c-80bc-df51e82a6206",
		"name": "Collaborate",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "dApp",
			"item": [
				{
					"name": "Keycloak API",
					"item": [
						{
							"name": "Init admin user",
							"item": [
								{
									"name": "Setup - Get Keycloak Admin token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let response = pm.response.json();",
													"tests['Request resulted in 200 OK'] = responseCode.code === 200;",
													"pm.environment.set(\"keycloak-admin-token\", response.access_token);",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "username",
													"value": "{{dAppKeycloakUsername}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{dAppKeycloakPassword}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "admin-cli",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{dAppKeycloakUrl}}/auth/realms/master/protocol/openid-connect/token",
											"host": [
												"{{dAppKeycloakUrl}}"
											],
											"path": [
												"auth",
												"realms",
												"master",
												"protocol",
												"openid-connect",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Setup - Update admin roles",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"tests['Update of  admin roles resulted in 204 OK'] = responseCode.code === 204;"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{keycloak-admin-token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"id\": \"d0ff921e-8d15-4938-911a-d658ec59f772\",\n        \"name\": \"service_provider_administrator\",\n        \"containerId\": \"{{dAppKeycloakRealm}}\"\n    },\n    {\n        \"id\": \"7cb55b06-881c-4a74-9a98-ae2bd852a43f\",\n        \"name\": \"service_provider_operator\"\n    },\n    {\n        \"id\": \"53148955-f9d9-40bb-a532-52a392882d65\",\n        \"name\": \"service_identity_provider_administrator\"\n    }\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{dAppKeycloakUrl}}/auth/admin/realms/{{dAppKeycloakRealm}}/users/aae4aaf7-69c0-4c90-adb8-3b6f848e31c4/role-mappings/realm",
											"host": [
												"{{dAppKeycloakUrl}}"
											],
											"path": [
												"auth",
												"admin",
												"realms",
												"{{dAppKeycloakRealm}}",
												"users",
												"aae4aaf7-69c0-4c90-adb8-3b6f848e31c4",
												"role-mappings",
												"realm"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Token - Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let response = pm.response.json();",
													"pm.environment.set(\"dAppToken\", response.access_token);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{dapp-admin-user}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{dapp-admin-password}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{dAppKeycloakFrontendClientId}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{dAppKeycloakUrl}}/auth/realms/{{dAppKeycloakRealm}}/protocol/openid-connect/token",
											"host": [
												"{{dAppKeycloakUrl}}"
											],
											"path": [
												"auth",
												"realms",
												"{{dAppKeycloakRealm}}",
												"protocol",
												"openid-connect",
												"token"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get Token - Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json();",
											"pm.environment.set(\"dAppToken\", response.access_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{dapp-admin-user}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{dapp-admin-password}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{dAppKeycloakFrontendClientId}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dAppKeycloakUrl}}/auth/realms/{{dAppKeycloakRealm}}/protocol/openid-connect/token",
									"host": [
										"{{dAppKeycloakUrl}}"
									],
									"path": [
										"auth",
										"realms",
										"{{dAppKeycloakRealm}}",
										"protocol",
										"openid-connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Token - Alice",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json();",
											"pm.environment.set(\"dAppToken\", response.access_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "alice",
											"type": "text"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{dAppKeycloakFrontendClientId}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dAppKeycloakUrl}}/auth/realms/{{dAppKeycloakRealm}}/protocol/openid-connect/token",
									"host": [
										"{{dAppKeycloakUrl}}"
									],
									"path": [
										"auth",
										"realms",
										"{{dAppKeycloakRealm}}",
										"protocol",
										"openid-connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Authorization Server Metadata",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{dAppKeycloakUrl}}/auth/realms/{{dAppKeycloakRealm}}/.well-known/openid-configuration",
									"host": [
										"{{dAppKeycloakUrl}}"
									],
									"path": [
										"auth",
										"realms",
										"{{dAppKeycloakRealm}}",
										".well-known",
										"openid-configuration"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get users",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{dAppKeycloakUrl}}/auth/realms/{{dAppKeycloakRealm}}/custom-api/users?paged=true&sorted=false&pageNumber=0&offset=0&pageSize=10",
									"host": [
										"{{dAppKeycloakUrl}}"
									],
									"path": [
										"auth",
										"realms",
										"{{dAppKeycloakRealm}}",
										"custom-api",
										"users"
									],
									"query": [
										{
											"key": "paged",
											"value": "true"
										},
										{
											"key": "sorted",
											"value": "false"
										},
										{
											"key": "pageNumber",
											"value": "0"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10"
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{dAppToken}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Collaborate API",
					"item": [
						{
							"name": "User",
							"item": [
								{
									"name": "Create TAG user, as pending_asset_owner",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{dAppApiUrl}}/api/v1/users/tag/asset-owner",
											"host": [
												"{{dAppApiUrl}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												"tag",
												"asset-owner"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get users",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{dAppApiUrl}}/api/v1/users?page=0&size=10",
											"host": [
												"{{dAppApiUrl}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Datasource",
							"item": [
								{
									"name": "Get datasources",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"tests['Request resulted in 200 OK'] = responseCode.code === 200;",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{dAppApiUrl}}/api/v1/datasources",
											"host": [
												"{{dAppApiUrl}}"
											],
											"path": [
												"api",
												"v1",
												"datasources"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create BasicAuth datasource",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"tests['Request resulted in 201 Created'] = responseCode.code === 201;",
													"let response = pm.response.json();",
													"pm.environment.set(\"test-datasource-id\", response.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "pfxFile",
													"type": "file",
													"src": "data/datasource/MWPDRV01.pfx"
												},
												{
													"key": "datasource",
													"contentType": "application/json",
													"type": "file",
													"src": "data/datasource/psa-valid.json"
												}
											]
										},
										"url": {
											"raw": "{{dAppApiUrl}}/api/v1/datasources",
											"host": [
												"{{dAppApiUrl}}"
											],
											"path": [
												"api",
												"v1",
												"datasources"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get datasource",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"tests['Request resulted in 200 OK'] = responseCode.code === 200;",
													"",
													"let response = pm.response.json();",
													"tests['Request result contains datasourceId'] = response.id === pm.environment.get(\"test-datasource-id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{dAppApiUrl}}/api/v1/datasources/{{test-datasource-id}}",
											"host": [
												"{{dAppApiUrl}}"
											],
											"path": [
												"api",
												"v1",
												"datasources",
												"{{test-datasource-id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Gateway",
							"item": [
								{
									"name": "Get datasource vehicles",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"tests['Request resulted in 200 OK'] = responseCode.code === 200;"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{dAppApiUrl}}/api/v1/gateway/datasource/{{test-datasource-id}}/vehicles",
											"host": [
												"{{dAppApiUrl}}"
											],
											"path": [
												"api",
												"v1",
												"gateway",
												"datasource",
												"{{test-datasource-id}}",
												"vehicles"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Passport",
							"item": [
								{
									"name": "Create passport, as DSP",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"tests['Request resulted in 200 OK'] = responseCode.code === 200;",
													"",
													"pm.environment.set(\"tag-job-id\", pm.response.json().id);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"test-vin\", utils.generateVIN());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"vehicleOwnerMail\": \"pcc-development@theblockchainxdev.com\",\n    \"datasourceUUID\": \"{{test-datasource-id}}\",\n    \"vin\": \"{{test-vin}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{dAppApiUrl}}/api/v1/digital-passport",
											"host": [
												"{{dAppApiUrl}}"
											],
											"path": [
												"api",
												"v1",
												"digital-passport"
											]
										}
									},
									"response": []
								},
								{
									"name": "Consent  passport",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"tests['Request resulted in 200 OK'] = responseCode.code === 200;",
													"",
													"pm.environment.set(\"tag-job-id\", pm.response.json().id);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{dAppApiUrl}}/api/v1/digital-passport/8",
											"host": [
												"{{dAppApiUrl}}"
											],
											"path": [
												"api",
												"v1",
												"digital-passport",
												"8"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get passport",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"tests['Request resulted in 200 OK'] = responseCode.code === 200;",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{dAppApiUrl}}/api/v1/digital-passport",
											"host": [
												"{{dAppApiUrl}}"
											],
											"path": [
												"api",
												"v1",
												"digital-passport"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Organization",
							"item": [
								{
									"name": "Get organizations",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{dAppApiUrl}}/api/v1/organizations",
											"host": [
												"{{dAppApiUrl}}"
											],
											"path": [
												"api",
												"v1",
												"organizations"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Tests suites",
							"item": [
								{
									"name": "COL-215 Asset owner first login",
									"item": [
										{
											"name": "As pending_asset_owner, I do first login",
											"item": [
												{
													"name": "Setup - Get Keycloak Admin token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let response = pm.response.json();",
																	"tests['Request resulted in 200 OK'] = responseCode.code === 200;",
																	"pm.environment.set(\"keycloak-admin-token\", response.access_token);",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "username",
																	"value": "{{dAppKeycloakUsername}}",
																	"type": "text"
																},
																{
																	"key": "password",
																	"value": "{{dAppKeycloakPassword}}",
																	"type": "text"
																},
																{
																	"key": "client_id",
																	"value": "admin-cli",
																	"type": "text"
																},
																{
																	"key": "grant_type",
																	"value": "password",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{dAppKeycloakUrl}}/auth/realms/master/protocol/openid-connect/token",
															"host": [
																"{{dAppKeycloakUrl}}"
															],
															"path": [
																"auth",
																"realms",
																"master",
																"protocol",
																"openid-connect",
																"token"
															]
														}
													},
													"response": []
												},
												{
													"name": "Setup - Create asset owner user",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"test-asset-owner-email\");",
																	"tests['Creation of ' + user + ' resulted in 201 OK'] = responseCode.code === 201;"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"function generateEmail(){",
																	"    let timestamp = new Date().getTime();",
																	"    return \"asset-owner@\"+timestamp+\".test\";",
																	"}",
																	"",
																	"let email = generateEmail();",
																	"pm.environment.set(\"test-asset-owner-email\", email);",
																	"pm.environment.set(\"test-asset-owner-username\", email);",
																	"pm.environment.set(\"test-asset-owner-password\", \"password\");",
																	"pm.environment.set(\"test-asset-owner-vault-id\", email.toVaultId());",
																	"",
																	"// Roles must be assigned in a separate request"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{keycloak-admin-token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"email\": \"{{test-asset-owner-email}}\",\n    \"username\": \"{{test-asset-owner-email}}\",\n    \"enabled\": true,\n    \"emailVerified\": true,\n    \"credentials\":[{\n        \"type\": \"password\",\n        \"value\":\"{{test-asset-owner-password}}\",\n        \"temporary\":false\n    }],\n    \"realmRoles\":[\"pending_asset_owner\", \"service_identity_provider_administrator\", \"service_provider_administrator\", \"offline_access\"]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{dAppKeycloakUrl}}/auth/admin/realms/{{dAppKeycloakRealm}}/users",
															"host": [
																"{{dAppKeycloakUrl}}"
															],
															"path": [
																"auth",
																"admin",
																"realms",
																"{{dAppKeycloakRealm}}",
																"users"
															]
														}
													},
													"response": []
												},
												{
													"name": "Setup - Get asset owner id",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let response = pm.response.json();",
																	"let userId = response[0].id;",
																	"let email = pm.environment.get(\"test-asset-owner-email\")",
																	"",
																	"tests['Id of ' + email + ' is '+ userId] = responseCode.code === 200;",
																	"pm.environment.set(\"test-asset-owner-id\", userId)"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{keycloak-admin-token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{dAppKeycloakUrl}}/auth/admin/realms/{{dAppKeycloakRealm}}/users?email={{test-asset-owner-email}}",
															"host": [
																"{{dAppKeycloakUrl}}"
															],
															"path": [
																"auth",
																"admin",
																"realms",
																"{{dAppKeycloakRealm}}",
																"users"
															],
															"query": [
																{
																	"key": "email",
																	"value": "{{test-asset-owner-email}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Setup - Update asset owner roles",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"test-asset-owner-email\");",
																	"tests['Update of ' + user + 'roles resulted in 204 OK'] = responseCode.code === 204;"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// Roles must be assigned in a separate request",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{keycloak-admin-token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "[\n    {\n        \"id\": \"d7732aa5-f408-4248-96aa-f0ec4c7fd41a\",\n        \"name\": \"pending_asset_owner\",\n        \"containerId\": \"{{dAppKeycloakRealm}}\"\n    }\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{dAppKeycloakUrl}}/auth/admin/realms/{{dAppKeycloakRealm}}/users/{{test-asset-owner-id}}/role-mappings/realm",
															"host": [
																"{{dAppKeycloakUrl}}"
															],
															"path": [
																"auth",
																"admin",
																"realms",
																"{{dAppKeycloakRealm}}",
																"users",
																"{{test-asset-owner-id}}",
																"role-mappings",
																"realm"
															]
														}
													},
													"response": []
												},
												{
													"name": "Setup - Get asset owner token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let response = pm.response.json();",
																	"pm.environment.set(\"test-asset-owner-token\", response.access_token);",
																	"tests['Request resulted in 200 OK'] = responseCode.code === 200;"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "grant_type",
																	"value": "password",
																	"type": "text"
																},
																{
																	"key": "username",
																	"value": "{{test-asset-owner-username}}",
																	"type": "text"
																},
																{
																	"key": "password",
																	"value": "{{test-asset-owner-password}}",
																	"type": "text"
																},
																{
																	"key": "client_id",
																	"value": "{{dAppKeycloakFrontendClientId}}",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{dAppKeycloakUrl}}/auth/realms/{{dAppKeycloakRealm}}/protocol/openid-connect/token",
															"host": [
																"{{dAppKeycloakUrl}}"
															],
															"path": [
																"auth",
																"realms",
																"{{dAppKeycloakRealm}}",
																"protocol",
																"openid-connect",
																"token"
															]
														}
													},
													"response": []
												},
												{
													"name": "As pending asset owner,  I create my TAG user AND get asset_owner role",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"test-asset-owner-email\");",
																	"tests['Update of ' + user + 'results in 200 OK'] = responseCode.code === 200;"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{test-asset-owner-token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{dAppApiUrl}}/api/v1/users/tag/asset-owner",
															"host": [
																"{{dAppApiUrl}}"
															],
															"path": [
																"api",
																"v1",
																"users",
																"tag",
																"asset-owner"
															]
														}
													},
													"response": []
												},
												{
													"name": "Setup - Get asset owner publicKey",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"tests['Request resulted in 200 OK'] = responseCode.code === 200;",
																	"",
																	"let response = pm.response.json();",
																	"pm.environment.set(\"test-asset-owner-publicKeyHash\", response[0].account);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{tagApiUrl}}/api/user?userIdList={{test-asset-owner-vault-id}}",
															"host": [
																"{{tagApiUrl}}"
															],
															"path": [
																"api",
																"user"
															],
															"query": [
																{
																	"key": "userIdList",
																	"value": "{{test-asset-owner-vault-id}}"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "As asset_owner, create TAG user should be forbidden",
											"item": [
												{
													"name": "Get asset owner token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let response = pm.response.json();",
																	"pm.environment.set(\"test-asset-owner-token\", response.access_token);",
																	"tests['Request resulted in 200 OK'] = responseCode.code === 200;"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "grant_type",
																	"value": "password",
																	"type": "text"
																},
																{
																	"key": "username",
																	"value": "{{test-asset-owner-username}}",
																	"type": "text"
																},
																{
																	"key": "password",
																	"value": "{{test-asset-owner-password}}",
																	"type": "text"
																},
																{
																	"key": "client_id",
																	"value": "{{dAppKeycloakFrontendClientId}}",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{dAppKeycloakUrl}}/auth/realms/{{dAppKeycloakRealm}}/protocol/openid-connect/token",
															"host": [
																"{{dAppKeycloakUrl}}"
															],
															"path": [
																"auth",
																"realms",
																"{{dAppKeycloakRealm}}",
																"protocol",
																"openid-connect",
																"token"
															]
														}
													},
													"response": []
												},
												{
													"name": "As asset owner,  I create my TAG user AND get asset_owner role",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let user = pm.environment.get(\"test-asset-owner-email\");",
																	"tests['Update of ' + user + 'results in 403 Forbidden'] = responseCode.code === 403;"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{test-asset-owner-token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{dAppApiUrl}}/api/v1/users/tag/asset-owner",
															"host": [
																"{{dAppApiUrl}}"
															],
															"path": [
																"api",
																"v1",
																"users",
																"tag",
																"asset-owner"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Setup - Create DSP",
									"item": [
										{
											"name": "Setup - Get Keycloak Admin token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let response = pm.response.json();",
															"tests['Request resulted in 200 OK'] = responseCode.code === 200;",
															"pm.environment.set(\"keycloak-admin-token\", response.access_token);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "username",
															"value": "{{dAppKeycloakUsername}}",
															"type": "text"
														},
														{
															"key": "password",
															"value": "{{dAppKeycloakPassword}}",
															"type": "text"
														},
														{
															"key": "client_id",
															"value": "admin-cli",
															"type": "text"
														},
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dAppKeycloakUrl}}/auth/realms/master/protocol/openid-connect/token",
													"host": [
														"{{dAppKeycloakUrl}}"
													],
													"path": [
														"auth",
														"realms",
														"master",
														"protocol",
														"openid-connect",
														"token"
													]
												}
											},
											"response": []
										},
										{
											"name": "Setup - Create DSP user",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"test-dsp-email\");",
															"tests['Creation of ' + user + ' resulted in 201 OK'] = responseCode.code === 201;"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"function generateEmail(){",
															"    let timestamp = new Date().getTime();",
															"    return \"dsp@\"+timestamp+\".test\";",
															"}",
															"",
															"let email = generateEmail();",
															"pm.environment.set(\"test-dsp-email\", email);",
															"pm.environment.set(\"test-dsp-username\", email);",
															"pm.environment.set(\"test-dsp-password\", \"password\");",
															"pm.environment.set(\"test-dsp-vault-id\", email.toVaultId());",
															"",
															"// Roles must be assigned in a separate request"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{keycloak-admin-token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"email\": \"{{test-dsp-email}}\",\n    \"username\": \"{{test-dsp-email}}\",\n    \"enabled\": true,\n    \"emailVerified\": true,\n    \"credentials\":[{\n        \"type\": \"password\",\n        \"value\":\"{{test-dsp-password}}\",\n        \"temporary\":false\n    }],\n    \"realmRoles\":[\"pending_asset_owner\", \"uma_authorization\", \"offline_access\"]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{dAppKeycloakUrl}}/auth/admin/realms/{{dAppKeycloakRealm}}/users",
													"host": [
														"{{dAppKeycloakUrl}}"
													],
													"path": [
														"auth",
														"admin",
														"realms",
														"{{dAppKeycloakRealm}}",
														"users"
													]
												}
											},
											"response": []
										},
										{
											"name": "Setup - Get DSP user id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let response = pm.response.json();",
															"let userId = response[0].id;",
															"let email = pm.environment.get(\"test-dsp-email\")",
															"",
															"tests['Id of ' + email + ' is '+ userId] = responseCode.code === 200;",
															"pm.environment.set(\"test-dsp-id\", userId)"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{keycloak-admin-token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{dAppKeycloakUrl}}/auth/admin/realms/{{dAppKeycloakRealm}}/users?email={{test-dsp-email}}",
													"host": [
														"{{dAppKeycloakUrl}}"
													],
													"path": [
														"auth",
														"admin",
														"realms",
														"{{dAppKeycloakRealm}}",
														"users"
													],
													"query": [
														{
															"key": "email",
															"value": "{{test-dsp-email}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Setup - Update DSP roles",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let user = pm.environment.get(\"test-asset-owner-email\");",
															"tests['Update of ' + user + 'roles resulted in 204 OK'] = responseCode.code === 204;"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{keycloak-admin-token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"id\": \"d0ff921e-8d15-4938-911a-d658ec59f772\",\n        \"name\": \"service_provider_administrator\",\n        \"containerId\": \"{{dAppKeycloakRealm}}\"\n    },\n    {\n        \"id\": \"7cb55b06-881c-4a74-9a98-ae2bd852a43f\",\n        \"name\": \"service_provider_operator\"\n    },\n    {\n        \"id\": \"53148955-f9d9-40bb-a532-52a392882d65\",\n        \"name\": \"service_identity_provider_administrator\"\n    }\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{dAppKeycloakUrl}}/auth/admin/realms/{{dAppKeycloakRealm}}/users/{{test-dsp-id}}/role-mappings/realm",
													"host": [
														"{{dAppKeycloakUrl}}"
													],
													"path": [
														"auth",
														"admin",
														"realms",
														"{{dAppKeycloakRealm}}",
														"users",
														"{{test-dsp-id}}",
														"role-mappings",
														"realm"
													]
												}
											},
											"response": []
										},
										{
											"name": "Setup - Get DSP Token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"tests['Get DSP token resulted in 200 OK'] = responseCode.code === 200;",
															"let response = pm.response.json();",
															"pm.environment.set(\"test-dsp-token\", response.access_token);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "{{test-dsp-username}}",
															"type": "text"
														},
														{
															"key": "password",
															"value": "{{test-dsp-password}}",
															"type": "text"
														},
														{
															"key": "client_id",
															"value": "{{dAppKeycloakFrontendClientId}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dAppKeycloakUrl}}/auth/realms/{{dAppKeycloakRealm}}/protocol/openid-connect/token",
													"host": [
														"{{dAppKeycloakUrl}}"
													],
													"path": [
														"auth",
														"realms",
														"{{dAppKeycloakRealm}}",
														"protocol",
														"openid-connect",
														"token"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "COL-148 As a DSP, I want to create a BasicAuth Datasource",
									"item": [
										{
											"name": "GIVEN Invalid passphrase",
											"item": [
												{
													"name": "As DSP, WHEN I add a first BasicAuth datasource with invalid pfxFile THEN the datasource is created",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"tests['Request resulted in 400 BadRequest'] = responseCode.code === 400;",
																	"",
																	"let response = pm.response.json();",
																	"let expectedResponseMessage = \"Provided passphrase can't be used to decrypt private key\";",
																	"console.log(response)",
																	"tests['Request failed with \"'+expectedResponseMessage+'\" message '] = response.message === expectedResponseMessage;",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{test-dsp-token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "pfxFile",
																	"type": "file",
																	"src": "data/datasource/selfsigned-password.pfx"
																},
																{
																	"key": "datasource",
																	"contentType": "application/json",
																	"type": "file",
																	"src": "data/datasource/wrong-passphrase.json"
																}
															]
														},
														"url": {
															"raw": "{{dAppApiUrl}}/api/v1/datasources",
															"host": [
																"{{dAppApiUrl}}"
															],
															"path": [
																"api",
																"v1",
																"datasources"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "GIVEN wrong pfxFile",
											"item": [
												{
													"name": "As DSP, WHEN I add a first BasicAuth datasource with invalid pfxFile THEN the datasource is created",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"tests['Request resulted in 400 BadRequest'] = responseCode.code === 400;",
																	"",
																	"let response = pm.response.json();",
																	"let expectedResponseMessage = \"Test connection failed\";",
																	"console.log(response)",
																	"tests['Request failed with \"'+expectedResponseMessage+'\" message '] = response.message === expectedResponseMessage;"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{test-dsp-token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "pfxFile",
																	"type": "file",
																	"src": "data/datasource/selfsigned-password.pfx"
																},
																{
																	"key": "datasource",
																	"contentType": "application/json",
																	"type": "file",
																	"src": "data/datasource/wrong-pfx-file.json"
																}
															]
														},
														"url": {
															"raw": "{{dAppApiUrl}}/api/v1/datasources",
															"host": [
																"{{dAppApiUrl}}"
															],
															"path": [
																"api",
																"v1",
																"datasources"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "GIVEN Valid data",
											"item": [
												{
													"name": "Setup - Get DSP Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"tests['Get DSP token resulted in 200 OK'] = responseCode.code === 200;",
																	"let response = pm.response.json();",
																	"pm.environment.set(\"test-dsp-token\", response.access_token);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "grant_type",
																	"value": "password",
																	"type": "text"
																},
																{
																	"key": "username",
																	"value": "{{test-dsp-username}}",
																	"type": "text"
																},
																{
																	"key": "password",
																	"value": "{{test-dsp-password}}",
																	"type": "text"
																},
																{
																	"key": "client_id",
																	"value": "{{dAppKeycloakFrontendClientId}}",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{dAppKeycloakUrl}}/auth/realms/{{dAppKeycloakRealm}}/protocol/openid-connect/token",
															"host": [
																"{{dAppKeycloakUrl}}"
															],
															"path": [
																"auth",
																"realms",
																"{{dAppKeycloakRealm}}",
																"protocol",
																"openid-connect",
																"token"
															]
														}
													},
													"response": []
												},
												{
													"name": "As DSP, I can create a valid datasource",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"tests['Request resulted in 201 Created'] = responseCode.code === 201;",
																	"let response = pm.response.json();",
																	"pm.environment.set(\"test-datasource-id\", response.id);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{test-dsp-token}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "pfxFile",
																	"type": "file",
																	"src": "data/datasource/MWPDRV01.pfx"
																},
																{
																	"key": "datasource",
																	"contentType": "application/json",
																	"type": "file",
																	"src": "data/datasource/psa-valid.json"
																}
															]
														},
														"url": {
															"raw": "{{dAppApiUrl}}/api/v1/datasources",
															"host": [
																"{{dAppApiUrl}}"
															],
															"path": [
																"api",
																"v1",
																"datasources"
															]
														}
													},
													"response": []
												},
												{
													"name": "Then GET datasources contains the created datasource",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"tests['Request resulted in 200 Created'] = responseCode.code === 200;",
																	"",
																	"let datasourceId = pm.environment.get(\"test-datasource-id\");",
																	"let response = pm.response.json();",
																	"response.content.find(ds => ds.id === datasourceId)",
																	"tests['Request body contains created datasourceId='+datasourceId+''] = response.content.find(ds => ds.id === datasourceId) !== undefined;",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{test-dsp-token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{dAppApiUrl}}/api/v1/datasources",
															"host": [
																"{{dAppApiUrl}}"
															],
															"path": [
																"api",
																"v1",
																"datasources"
															]
														}
													},
													"response": []
												},
												{
													"name": "Then GET datasource by id returns the datasource",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"tests['Request resulted in 200 OK'] = responseCode.code === 200;"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{test-dsp-token}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{dAppApiUrl}}/api/v1/datasources/{{test-datasource-id}}",
															"host": [
																"{{dAppApiUrl}}"
															],
															"path": [
																"api",
																"v1",
																"datasources",
																"{{test-datasource-id}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "COL-158 Datasource with Traefik usage",
									"item": [
										{
											"name": "Get datasource vehicles",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"tests['Request resulted in 200 OK'] = responseCode.code === 200;",
															"",
															"let response = pm.response.json();",
															"pm.test(\"Response total field isEqual to 2\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.total).to.eq(2);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{test-dsp-token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{dAppApiUrl}}/api/v1/gateway/datasource/{{test-datasource-id}}/vehicles",
													"host": [
														"{{dAppApiUrl}}"
													],
													"path": [
														"api",
														"v1",
														"gateway",
														"datasource",
														"{{test-datasource-id}}",
														"vehicles"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get vehicle odometer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"tests['Request resulted in 200 OK'] = responseCode.code === 200;",
															"",
															"let response = pm.response.json();",
															"pm.test(\"Response total field isEqual to 2\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.vin).to.eq(\"VR1ATTENTKW033329\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{test-dsp-token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{dAppApiUrl}}/api/v1/gateway/datasource/{{test-datasource-id}}/kilometer/124091f9115613c465747647191cfa4d0d97bc3e1e4ae2f1cb3d192c3c36e183e6620c36bd6bb6d0115a436ce28529b79",
													"host": [
														"{{dAppApiUrl}}"
													],
													"path": [
														"api",
														"v1",
														"gateway",
														"datasource",
														"{{test-datasource-id}}",
														"kilometer",
														"124091f9115613c465747647191cfa4d0d97bc3e1e4ae2f1cb3d192c3c36e183e6620c36bd6bb6d0115a436ce28529b79"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "COL-250 Use predefined organization key",
									"item": [
										{
											"name": "WHEN get admin user THEN expected key is returned",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"tests['Request resulted in 200 OK'] = responseCode.code === 200;",
															"",
															"let response = pm.response.json();",
															"tests['Request result has expected account value '] = ",
															"  response[0].account === pm.environment.get(\"tag-admin-publicKeyHash\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tagApiUrl}}/api/user?userIdList={{tag-admin}}",
													"host": [
														"{{tagApiUrl}}"
													],
													"path": [
														"api",
														"user"
													],
													"query": [
														{
															"key": "userIdList",
															"value": "{{tag-admin}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "COL-220 As DSP, I want to create Digital Passport for my client",
									"item": [
										{
											"name": "As DSP, create Digital Passport",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"tests['Request resulted in 200 OK'] = responseCode.code === 200;",
															"pm.environment.set(\"tag-job-id\", pm.response.json().id);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let vin = utils.generateVIN();",
															"pm.environment.set(\"test-vin\", vin);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{test-dsp-token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"vehicleOwnerMail\": \"{{test-asset-owner-email}}\",\n    \"datasourceUUID\": \"19865f3f-f7ab-454e-bc48-a793b7ff45fc\",\n    \"vin\": \"{{test-vin}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{dAppApiUrl}}/api/v1/digital-passport",
													"host": [
														"{{dAppApiUrl}}"
													],
													"path": [
														"api",
														"v1",
														"digital-passport"
													]
												}
											},
											"response": []
										},
										{
											"name": "As asset_owner, create Digital Passport",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"tests['Request resulted in 403 Forbidden'] = responseCode.code === 403;",
															"pm.environment.set(\"tag-job-id\", pm.response.json().id);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let vin = utils.generateVIN();",
															"pm.environment.set(\"test-vin\", vin);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{test-asset-owner-token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"vehicleOwnerMail\": \"{{test-asset-owner-email}}\",\n    \"datasourceUUID\": \"19865f3f-f7ab-454e-bc48-a793b7ff45fc\",\n    \"vin\": \"{{test-vin}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{dAppApiUrl}}/api/v1/digital-passport",
													"host": [
														"{{dAppApiUrl}}"
													],
													"path": [
														"api",
														"v1",
														"digital-passport"
													]
												}
											},
											"response": []
										},
										{
											"name": "As DSP, create Digital Passport on existing VIN",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"tests['Request resulted in 200 OK'] = responseCode.code === 409;",
															"pm.environment.set(\"tag-job-id\", pm.response.json().id);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{test-dsp-token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"vehicleOwnerMail\": \"{{test-asset-owner-email}}\",\n    \"datasourceUUID\": \"19865f3f-f7ab-454e-bc48-a793b7ff45fc\",\n    \"vin\": \"{{test-vin}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{dAppApiUrl}}/api/v1/digital-passport",
													"host": [
														"{{dAppApiUrl}}"
													],
													"path": [
														"api",
														"v1",
														"digital-passport"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "COL-157 Get organizations",
									"item": [
										{
											"name": "Get organizations",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Result contains at least PSA and Movidia organization\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.length).to.greaterThan(1);",
															"",
															"    const adminOrg = jsonData.find(o => o.publicKeyHash === pm.environment.get(\"tag-admin-publicKeyHash\"));",
															"    pm.expect(adminOrg).not.eq(undefined);",
															"",
															"    const otherOrg = jsonData.find(o => o.publicKeyHash === pm.environment.get(\"tag-other-publicKeyHash\"));",
															"    pm.expect(otherOrg).not.eq(undefined);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{test-dsp-token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{dAppApiUrl}}/api/v1/organizations",
													"host": [
														"{{dAppApiUrl}}"
													],
													"path": [
														"api",
														"v1",
														"organizations"
													]
												}
											},
											"response": []
										}
									]
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{dAppToken}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"utils = {",
							"  toVaultId : function (userId){",
							"    return userId.replace('@', '_._xdev-at_._');",
							"  },",
							"  fromVaultId : function (vaultId){",
							"    return userId.replace('_._xdev-at_._', '@');",
							"  },",
							"  generateVIN: function(){",
							"    var result           = '';",
							"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';",
							"    var charactersLength = characters.length;",
							"    for ( var i = 0; i < 17; i++ ) {",
							"      result += characters.charAt(Math.floor(Math.random() * charactersLength));",
							"    }",
							"    return result;",
							"  }",
							"}",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Tezos Api Gateway",
			"item": [
				{
					"name": "Datasource",
					"item": [
						{
							"name": "Create datasource",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var datasourceUUID = utils.generateUUID();",
											"pm.environment.set(\"test-datasource-uuid\", datasourceUUID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"tag-job-id\", pm.response.json().id);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transactions\": [\n    {\n      \"contractAddress\": \"{{smart-contract-address}}\",\n      \"entryPoint\": \"createDatasource\",\n      \"entryPointParams\": {\n        \"datasourceUUID\" : \"{{test-datasource-uuid}}\",\n        \"cid\" : \"anyVal\"\n        }\n    }\n  ],\n  \"callerId\": \"{{dapp-id}}\",\n  \"secureKeyName\": \"{{tag-admin}}\"\n}\n\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{tagApiUrl}}/api/send/jobs",
									"host": [
										"{{tagApiUrl}}"
									],
									"path": [
										"api",
										"send",
										"jobs"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "User",
					"item": [
						{
							"name": "Create user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"test-asset-owner-publicKeyHash\", jsonData[0].account);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userIdList\": [\n    \"pcc-developmenttheblockchainxdev.com\"\n  ],\n  \"secureKeyName\": \"{{tag-admin}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{tagApiUrl}}/api/user/create",
									"host": [
										"{{tagApiUrl}}"
									],
									"path": [
										"api",
										"user",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user by id",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{tagApiUrl}}/api/user?userIdList=pcc-development_._xdev-at_._theblockchainxdev.com",
									"host": [
										"{{tagApiUrl}}"
									],
									"path": [
										"api",
										"user"
									],
									"query": [
										{
											"key": "userIdList",
											"value": "pcc-development_._xdev-at_._theblockchainxdev.com"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user address",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{tagApiUrl}}/api/user/address?userAddressList=tz1UhiKKkVWGCMv8Qp6AwyZTpYLdGrsUFwHa",
									"host": [
										"{{tagApiUrl}}"
									],
									"path": [
										"api",
										"user",
										"address"
									],
									"query": [
										{
											"key": "userAddressList",
											"value": "tz1UhiKKkVWGCMv8Qp6AwyZTpYLdGrsUFwHa"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Passport",
					"item": [
						{
							"name": "Create multisig",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"test-vin\", utils.generateVIN());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"tag-job-id\", pm.response.json().id);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transactions\": [\n    {\n      \"contractAddress\": \"{{smart-contract-address}}\",\n      \"entryPoint\": \"initPassportCreation\",\n      \"entryPointParams\": {\n            \"vehicleOwnerAddress\": \"{{test-asset-owner-publicKeyHash}}\",\n            \"dspAddress\": \"{{tag-admin-publicKeyHash}}\",\n            \"vin\": \"{{test-vin}}\",\n            \"datasource_uuid\": \"{{test-datasource-uuid}}\"\n      }\n    }\n  ],\n  \"callerId\": \"{{dapp-id}}\",\n  \"secureKeyName\": \"{{tag-admin}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{tagApiUrl}}/api/send/jobs",
									"host": [
										"{{tagApiUrl}}"
									],
									"path": [
										"api",
										"send",
										"jobs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get passportsByVO",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Result contains at least PSA and Movidia organization\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.organizations.value.length).to.greaterThan(1);",
											"",
											"    const adminOrg = jsonData.organizations.value.find(o => o.key === pm.environment.get(\"tag-admin-publicKeyHash\"));",
											"    pm.expect(adminOrg).not.eq(undefined);",
											"",
											"    const otherOrg = jsonData.organizations.value.find(o => o.key === pm.environment.get(\"tag-other-publicKeyHash\"));",
											"    pm.expect(otherOrg).not.eq(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"dataFields\": [\n        {\n            \"indexerPassportsWaitingConsentByVo\": [\n                {\n                    \"key\": \"{{test-asset-owner-publicKeyHash}}\"\n                }\n            ]\n        },\n        {\n            \"indexerPassportsByVo\": [\n                {\n                    \"key\": \"{{test-asset-owner-publicKeyHash}}\"\n                }\n            ]\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{tagApiUrl}}/api/tezos_node/storage/{{smart-contract-address}}",
									"host": [
										"{{tagApiUrl}}"
									],
									"path": [
										"api",
										"tezos_node",
										"storage",
										"{{smart-contract-address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get passportsByDSP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Result contains at least PSA and Movidia organization\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.organizations.value.length).to.greaterThan(1);",
											"",
											"    const adminOrg = jsonData.organizations.value.find(o => o.key === pm.environment.get(\"tag-admin-publicKeyHash\"));",
											"    pm.expect(adminOrg).not.eq(undefined);",
											"",
											"    const otherOrg = jsonData.organizations.value.find(o => o.key === pm.environment.get(\"tag-other-publicKeyHash\"));",
											"    pm.expect(otherOrg).not.eq(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"dataFields\": [\n        {\n            \"indexerPassportsWaitingConsentByDsp\": [\n                {\n                    \"key\": \"{{tag-admin-publicKeyHash}}\"\n                }\n            ]\n        },\n        {\n            \"indexerPassportsByDsp\": [\n                {\n                    \"key\": \"{{tag-admin-publicKeyHash}}\"\n                }\n            ]\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{tagApiUrl}}/api/tezos_node/storage/{{smart-contract-address}}",
									"host": [
										"{{tagApiUrl}}"
									],
									"path": [
										"api",
										"tezos_node",
										"storage",
										"{{smart-contract-address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get passportsByIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Result contains at least PSA and Movidia organization\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.organizations.value.length).to.greaterThan(1);",
											"",
											"    const adminOrg = jsonData.organizations.value.find(o => o.key === pm.environment.get(\"tag-admin-publicKeyHash\"));",
											"    pm.expect(adminOrg).not.eq(undefined);",
											"",
											"    const otherOrg = jsonData.organizations.value.find(o => o.key === pm.environment.get(\"tag-other-publicKeyHash\"));",
											"    pm.expect(otherOrg).not.eq(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"dataFields\": [\n        {\n            \"multisigs\": [\n                {\n                    \"key\": \"0\"\n                },\n                {\n                    \"key\": \"1\"\n                }\n            ]\n        },\n        {\n            \"passportMetadataByTokenId\": [\n                {\n                    \"key\": \"1\"\n                }\n            ]\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{tagApiUrl}}/api/tezos_node/storage/{{smart-contract-address}}",
									"host": [
										"{{tagApiUrl}}"
									],
									"path": [
										"api",
										"tezos_node",
										"storage",
										"{{smart-contract-address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "As Alice, I consent multisig",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"tag-job-id\", pm.response.json().id);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transactions\": [\n    {\n      \"contractAddress\": \"{{smart-contract-address}}\",\n      \"entryPoint\": \"passportConsent\",\n      \"entryPointParams\": {\n            \"contractId\": 21,\n            \"vehiculeOwnerAddress\":\"{{test-asset-owner-publicKeyHash}}\"\n      }\n    }\n  ],\n  \"callerId\": \"test\",\n  \"secureKeyName\": \"pcc-development_._xdev-at_._theblockchainxdev.com\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{tagApiUrl}}/api/send/jobs?cache=false",
									"host": [
										"{{tagApiUrl}}"
									],
									"path": [
										"api",
										"send",
										"jobs"
									],
									"query": [
										{
											"key": "cache",
											"value": "false"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Organization",
					"item": [
						{
							"name": "Get all organizations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Result contains at least PSA and Movidia organization\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.organizations.value.length).to.greaterThan(1);",
											"",
											"    const adminOrg = jsonData.organizations.value.find(o => o.key === pm.environment.get(\"tag-admin-publicKeyHash\"));",
											"    pm.expect(adminOrg).not.eq(undefined);",
											"",
											"    const otherOrg = jsonData.organizations.value.find(o => o.key === pm.environment.get(\"tag-other-publicKeyHash\"));",
											"    pm.expect(otherOrg).not.eq(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"dataFields\": [\n        \"organizations\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{tagApiUrl}}/api/tezos_node/storage/{{smart-contract-address}}",
									"host": [
										"{{tagApiUrl}}"
									],
									"path": [
										"api",
										"tezos_node",
										"storage",
										"{{smart-contract-address}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Tests suites",
					"item": [
						{
							"name": "Get User",
							"item": [
								{
									"name": "Get admin user by id should return created user publicKey Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Result has expected publicKey\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[0].account).to.eq(",
													"        pm.environment.get(\"tag-admin-publicKeyHash\")",
													"    );",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tagApiUrl}}/api/user?userIdList={{tag-admin}}",
											"host": [
												"{{tagApiUrl}}"
											],
											"path": [
												"api",
												"user"
											],
											"query": [
												{
													"key": "userIdList",
													"value": "{{tag-admin}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "COL-215 Create asset owner user",
							"item": [
								{
									"name": "Create user should return an account publicKey",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateEmail(){",
													"    let timestamp = new Date().getTime();",
													"    return \"asset-owner_._xdev-at-_._\"+timestamp+\".test\";",
													"}",
													"",
													"let email = generateEmail();",
													"pm.environment.set(\"test-asset-owner-vault-id\", email);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response account value has 36 characters\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[0].account).not.eq(undefined);",
													"    pm.expect(jsonData[0].account.length).to.eql(36);",
													"",
													"    pm.globals.set(\"test-asset-owner-publicKeyHash\", jsonData[0].account);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"userIdList\": [\n    \"{{test-asset-owner-vault-id}}\"\n  ],\n  \"secureKeyName\": \"{{tag-admin}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tagApiUrl}}/api/user/create",
											"host": [
												"{{tagApiUrl}}"
											],
											"path": [
												"api",
												"user",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get created user by id should return created user publicKey",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Result has expected publicKey\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[0].account).to.eq(",
													"        pm.globals.get(\"test-asset-owner-publicKeyHash\")",
													"    );",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tagApiUrl}}/api/user?userIdList={{test-asset-owner-vault-id}}",
											"host": [
												"{{tagApiUrl}}"
											],
											"path": [
												"api",
												"user"
											],
											"query": [
												{
													"key": "userIdList",
													"value": "{{test-asset-owner-vault-id}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "COL-220 Create Passport multisig",
							"item": [
								{
									"name": "Entrypoint \"initPassportCreation\" exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response contains expected entrypoint\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.schema.length).to.eql(1);",
													"    pm.expect(jsonData.schema[0].entryPoint).to.eql(\"initPassportCreation\");",
													"});",
													"",
													"pm.test(\"Entrypoint expects 4 parameters\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(Object.keys(jsonData.schema[0].schema).length).to.eql(4);",
													"    pm.expect(jsonData.schema[0].schema[\"datasource_uuid\"]).to.eql(\"bytes\");",
													"    pm.expect(jsonData.schema[0].schema[\"dspAddress\"]).to.eql(\"address\");",
													"    pm.expect(jsonData.schema[0].schema[\"vehiculeOwnerAddress\"]).to.eql(\"address\");",
													"    pm.expect(jsonData.schema[0].schema[\"vin\"]).to.eql(\"bytes\");",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tagApiUrl}}/api/entrypoints/{{smart-contract-address}}?entryPoints=initPassportCreation",
											"host": [
												"{{tagApiUrl}}"
											],
											"path": [
												"api",
												"entrypoints",
												"{{smart-contract-address}}"
											],
											"query": [
												{
													"key": "entryPoints",
													"value": "initPassportCreation"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create multisig",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"test-vin\", utils.generateVIN().hexEncode());",
													"pm.environment.set(\"test-uuid\", \"b6006c30-d84b-4ad7-a57b-55987c8aace7\".hexEncode());",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.environment.set(\"tag-job-id\", pm.response.json().id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transactions\": [\n    {\n      \"contractAddress\": \"{{smart-contract-address}}\",\n      \"entryPoint\": \"initPassportCreation\",\n      \"entryPointParams\": {\n            \"vehiculeOwnerAddress\": \"{{test-asset-owner-publicKeyHash}}\",\n            \"dspAddress\": \"{{tag-admin-publicKeyHash}}\",\n            \"vin\": \"{{test-vin}}\",\n            \"datasource_uuid\": \"{{test-uuid}}\"\n      }\n    }\n  ],\n  \"callerId\": \"{{dapp-id}}\",\n  \"secureKeyName\": \"{{tag-admin}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tagApiUrl}}/api/send/jobs",
											"host": [
												"{{tagApiUrl}}"
											],
											"path": [
												"api",
												"send",
												"jobs"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "COL-157 Get all organizations",
							"item": [
								{
									"name": "Get all organizations",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Result contains at least PSA and Movidia organization\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.organizations.value.length).to.greaterThan(1);",
													"",
													"    const adminOrg = jsonData.organizations.value.find(o => o.key === pm.environment.get(\"tag-admin-publicKeyHash\"));",
													"    pm.expect(adminOrg).not.eq(undefined);",
													"",
													"    const otherOrg = jsonData.organizations.value.find(o => o.key === pm.environment.get(\"tag-other-publicKeyHash\"));",
													"    pm.expect(otherOrg).not.eq(undefined);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"dataFields\": [\n        \"organizations\"\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tagApiUrl}}/api/tezos_node/storage/{{smart-contract-address}}",
											"host": [
												"{{tagApiUrl}}"
											],
											"path": [
												"api",
												"tezos_node",
												"storage",
												"{{smart-contract-address}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Get all entrypoints",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{tagApiUrl}}/api/entrypoints/{{smart-contract-address}}",
							"host": [
								"{{tagApiUrl}}"
							],
							"path": [
								"api",
								"entrypoints",
								"{{smart-contract-address}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Entrypoint \"requestAccess\" of a smartcontract",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{tagApiUrl}}/api/entrypoints/{{smart-contract-address}}?entryPoints=requestAccess",
							"host": [
								"{{tagApiUrl}}"
							],
							"path": [
								"api",
								"entrypoints",
								"{{smart-contract-address}}"
							],
							"query": [
								{
									"key": "entryPoints",
									"value": "requestAccess"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Storage - all",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{tagApiUrl}}/api/tezos_node/storage/{{smart-contract-address}}",
							"host": [
								"{{tagApiUrl}}"
							],
							"path": [
								"api",
								"tezos_node",
								"storage",
								"{{smart-contract-address}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Storage - one field",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"dataFields\": [\n        \"organizations\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{tagApiUrl}}/api/tezos_node/storage/KT1X2GBRQ7ADbJv9gHNKGKuGJKBgZGbcRd4U",
							"host": [
								"{{tagApiUrl}}"
							],
							"path": [
								"api",
								"tezos_node",
								"storage",
								"KT1X2GBRQ7ADbJv9gHNKGKuGJKBgZGbcRd4U"
							]
						}
					},
					"response": []
				},
				{
					"name": "Storage - map",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"dataFields\": [\n        {\n            \"organizations\" : [\n                { \"key\": \"tz1Upyf2fq4maUdW3xTQ2o56SrBePbqSsokm\" }\n            ]\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{tagApiUrl}}/api/tezos_node/storage/KT1DY2hHacAFegSjekmQPh26BUr9xetRkCZR",
							"host": [
								"{{tagApiUrl}}"
							],
							"path": [
								"api",
								"tezos_node",
								"storage",
								"KT1DY2hHacAFegSjekmQPh26BUr9xetRkCZR"
							]
						}
					},
					"response": []
				},
				{
					"name": "Storage - bigmap",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"dataFields\": [\n        {\n            \"accessRequests\" : [\n                { \"key\": {\n                        \"datasourceId\": 12,\n                        \"providerAddress\": \"tz1W9d1dgX5ueZkNNQaZneHt4kvrUF7XNdAW\",\n                        \"requesterAddress\": \"tz1Upyf2fq4maUdW3xTQ2o56SrBePbqSsokm\",\n                        \"scopeId\": \"13\"\n                    }\n                }\n            ]\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{tagApiUrl}}/api/tezos_node/storage/KT1DY2hHacAFegSjekmQPh26BUr9xetRkCZR",
							"host": [
								"{{tagApiUrl}}"
							],
							"path": [
								"api",
								"tezos_node",
								"storage",
								"KT1DY2hHacAFegSjekmQPh26BUr9xetRkCZR"
							]
						}
					},
					"response": []
				},
				{
					"name": "Forge - not use it",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transactions\": [\n    {\n      \"contractAddress\": \"KT1DY2hHacAFegSjekmQPh26BUr9xetRkCZR\",\n      \"entryPoint\": \"requestAccess\",\n      \"entryPointParams\": {\n            \"datasourceId\": 12,\n            \"providerAddress\": \"tz1W9d1dgX5ueZkNNQaZneHt4kvrUF7XNdAW\",\n            \"requesterAddress\": \"tz1Upyf2fq4maUdW3xTQ2o56SrBePbqSsokm\",\n            \"scopeId\": \"13\"\n      }\n    }\n  ],\n  \"callerId\": \"string\",\n  \"sourceAddress\": \"tz1Upyf2fq4maUdW3xTQ2o56SrBePbqSsokm\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{tagApiUrl}}/api/forge/jobs",
							"host": [
								"{{tagApiUrl}}"
							],
							"path": [
								"api",
								"forge",
								"jobs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Inject - not use it",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "=> sign the transaction and call the endpoint...",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": ""
						}
					},
					"response": []
				},
				{
					"name": "Send",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"transactions\": [\n        {\n            \"contractAddress\": \"{{smart-contract-address}}\",\n            \"entryPoint\": \"requestAccess\",\n            \"entryPointParams\": {\n                \"id\": \"test\",\n                \"datasourceId\": 158,\n                \"providerAddress\": \"{{tag-other-publicKeyHash}}\",\n                \"requesterAddress\": \"{{tag-admin-publicKeyHash}}\",\n                \"scopeId\": \"12\"\n            }\n        }\n    ],\n    \"callerId\": \"admin\",\n    \"secureKeyName\": \"{{tag-admin}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{tagApiUrl}}/api/send/jobs",
							"host": [
								"{{tagApiUrl}}"
							],
							"path": [
								"api",
								"send",
								"jobs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Job",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{tagApiUrl}}/api/job/{{tag-job-id}}",
							"host": [
								"{{tagApiUrl}}"
							],
							"path": [
								"api",
								"job",
								"{{tag-job-id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"utils = {",
					"    /**",
					"     * @return a random 17 characters VIN",
					"     */",
					"    generateVIN: function(){",
					"        var result = '';",
					"        var characters =  'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';",
					"        var charactersLength = characters.length;",
					"        for ( var i = 0; i < 17; i++ ) {",
					"            result += characters.charAt(Math.floor(Math.random() * ",
					" charactersLength));",
					"        }",
					"        console.log(\"generateVIN=\"+result);",
					"        return result;",
					"    },",
					"    generateUUID: function(){",
					"        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
					"            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);",
					"            return v.toString(16);",
					"        });",
					"    }",
					"}",
					"",
					"/**",
					" * @return The converted string in tag user id format",
					" */",
					"String.prototype.toVaultId = function(){",
					"    return this.replace('@', '_._xdev-at_._');",
					"}",
					"",
					"/**",
					" * @return the converted string where tag user id special token has been removed",
					" */",
					"String.prototype.fromVaultId = function(){",
					"    return this.replace('_._xdev-at_._', '@');",
					"}",
					"",
					"",
					"/**",
					" * @return The converted string in tag user id format",
					" */",
					"String.prototype.hexEncode = function(){",
					"    return this.split(\"\")",
					"     .map(c => c.charCodeAt(0).toString(16).padStart(2, \"0\"))",
					"     .join(\"\");",
					"}",
					"",
					"/**",
					" * @return The converted string in tag user id format",
					" */",
					"String.prototype.hexDecode = function(){",
					"    return this.split(/(\\w\\w)/g)",
					"   .filter(p => !!p)",
					"   .map(c => String.fromCharCode(parseInt(c, 16)))",
					"   .join(\"\")",
					"}",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}